---
layout: post
title:  "Java"
tags: java
---
[Underscores in Numeric Literals][underscores-literals]

In Java SE 7 and later, any number of underscore characters (_) can appear anywhere between digits in a numerical literal. This feature enables you, for example, to separate groups of digits in numeric literals, which can improve the readability of your code.

{% highlight java %}
private static int MOD = 1_000_000_007
{% endhighlight %}

[Enhanced For][for]

The for statement also has another form designed for iteration through *Collections* and *arrays* This form is sometimes referred to as the enhanced for statement, and can be used to make your loops more compact and easy to read.

### Multidimensional Array
{% highlight java %}
int[][] matrix = new int[r][c];
// r == matrix.length
// c == matrix[0].length
{% endhighlight %}

[Remainder Operator %][remainder-operator]

In C and C++, the remainder operator accepts only integral operands, but in the Java programming language, it also accepts floating-point operands.

### Integer

1. The remainder operation can be negative only if the dividend is negative, and can be positive only if the dividend is positive.
2. The magnitude of the result is always less than the magnitude of the divisor.

{% highlight java %}
(a / b) * b + (a % b) == a
{% endhighlight %}

{% highlight java %}
dividend / divisor
result = Math.abs(dividend) / Math.abs(divisor)  // towards 0
remainder = Integer.signum(dividend) * (Math.abs(dividend) % Math.abs(divisor))
{% endhighlight %}

{% highlight java %}
int a = 5 % 3;  // 2
int b = 5 / 3;  // 1

int c = 5 % (-3);  // 2
int d = 5 / (-3);  // -1

int e = (-5) % 3;  // -2
int f = (-5) / 3;  // -1

int g = (-5) % (-3);  // -2
int h = (-5) / (-3);  // 1
{% endhighlight %}

[floorMod](https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/lang/Math.html#floorMod(int,int))

{% highlight java %}
floorDiv(x, y) * y + floorMod(x, y) == x
{% endhighlight %}

The difference in values between floorMod and the % operator is due to the difference between floorDiv that returns the integer less than or equal to the quotient and the / operator that returns the integer closest to zero.

Examples:
If the signs of the arguments are the same, the results of floorMod and the % operator are the same.

{% highlight java %}
floorMod(+4, +3) == +1;   and (+4 % +3) == +1
floorMod(-4, -3) == -1;   and (-4 % -3) == -1
{% endhighlight %}

If the signs of the arguments are different, the results differ from the % operator.

{% highlight java %}
floorMod(+4, -3) == -2;   and (+4 % -3) == +1
floorMod(-4, +3) == +2;   and (-4 % +3) == -1
{% endhighlight %}

### Floating-point

The Java programming language defines % on floating-point operations to behave in a manner analogous to that of the integer remainder operator.

{% highlight java %}
double a = 5.0 % 3.0;  // 2.0

double b = 5.0 % (-3.0);  // 2.0

double c = (-5.0) % 3.0;  // -2.0

double d = (-5.0) % (-3.0);  // -2.0
{% endhighlight %}

## Queue
[Queue][queue]

Queue implementations generally do not allow insertion of ***null*** elements, although some implementations, such as **LinkedList**, do not prohibit insertion of null. Even in the implementations that permit it, null should not be inserted into a Queue, as null is also used as a special return value by the poll method to indicate that the queue contains no elements.

## Local Variable Type Interface

[Local variable type interface](https://docs.oracle.com/en/java/javase/13/language/local-variable-type-inference.html)

## Boolean Logical Operators

[Boolean Logical Operators &, ^, and \|](https://docs.oracle.com/javase/specs/jls/se15/html/jls-15.html#jls-15.22.2): no short-circuit

[underscores-literals]: https://docs.oracle.com/javase/7/docs/technotes/guides/language/underscores-literals.html
[for]: https://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html
[remainder-operator]: https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.17.3
[queue]: https://docs.oracle.com/javase/8/docs/api/java/util/Queue.html
