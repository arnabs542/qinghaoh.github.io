---
layout: post
title:  "Sort"
tags: sort
---
[Sort an Array][sort-an-array]

## Quick sort
### Lumuto Partition Scheme
{% highlight java %}
public int[] sortArray(int[] nums) {
    quickSort(nums, 0, nums.length - 1);
    return nums;
}
    
private void quickSort(int[] nums, int low, int high) {
    if (low < high) {
        int p = partition(nums, low, high);
        quickSort(nums, low, p - 1);
        quickSort(nums, p + 1, high);
    }
}
    
private int partition(int[] nums, int low, int high) {
    int pivot = nums[high];
    int i = low;
    for (int j = low; j < high; j++) {
        if (nums[j] < pivot) {
            swap(nums, i, j);
            i++;
        }
    }
    swap(nums, i, high);
    return i;
}
    
private void swap(int[] nums, int i, int j) {
    int tmp = nums[i];
    nums[i] = nums[j];
    nums[j] = tmp;
}
{% endhighlight %}

## Counting Sort
[Counting sort](https://en.wikipedia.org/wiki/Counting_sort)
[Find Lucky Integer in an Array][find-lucky-integer-in-an-array]

{% highlight java %}
// 0 <= arr[i] <= max
public int countingSort(int[] arr) {
    // histogram
    int[] count = new int[max + 1];
    for (int a : arr) {
        count[a]++;
    }

    // computes prefix sum
    for (int i = 1; i < count.length; i++) {
        count[i] += count[i - 1];
    }

    int[] result = new int[arr.length];
    for (int a : arr) {
        result[count[a]] = a;
        count[a]++;
    }

    return result;
}
{% endhighlight %}

[find-lucky-integer-in-an-array]: https://leetcode.com/problems/find-lucky-integer-in-an-array/
[sort-an-array]: https://leetcode.com/problems/sort-an-array/
