---
layout: post
title:  "Array"
tags: array
---
# Buckets
Count each element in an array `int[] a`.

If `0 <= a[i] <= max`, where max is not too big, then we can use `int[] count = new int[max + 1]` as buckets, instead of `Map<Integer, Integer>` 

# Rotation

[First Missing Positive][first-missing-positive]

{% highlight java %}
public void rotate(int[] nums, int k) {
    int n = nums.length;
    k %= n;
    int start = 0, count = 0;
    while (count != n) {
        int index = start, curr = nums[index];
        do {
            index = (index + k) % n;
            int tmp = nums[index];
            nums[index] = curr;
            curr = tmp;
            count++;
        } while (index != start);
        start++;
    }
    return;
}
{% endhighlight %}

[Rotate Array][rotate-array]

![Example](/assets/rotate_array.png)

{% highlight java %}
public void rotate(int[] nums, int k) {
    k %= nums.length;
    int start = 0, count = 0;
    while (count != nums.length) {
        int index = start, curr = nums[index];
        do {
            index = (index + k) % nums.length;
            int tmp = nums[index];
            nums[index] = curr;
            curr = tmp;
            count++;
        } while (index != start);
        start++;
    }
    return;
}
{% endhighlight %}

[Shift 2D Grid][shift-2d-grid]

[Reverse Words in a String II][reverse-words-in-a-string-ii]

{% highlight java %}
public void reverseWords(char[] s) {
    reverse(s, 0, s.length);

    int start = 0, end = 0;
    while (end < s.length) {
        if (s[end] == ' ') {
            reverse(s, start, end);
            start = end + 1;
        }
        end++;
    }
    reverse(s, start, end);
}

private void reverse(char[] s, int start, int end) {
    int i = start, j = end - 1;
    while (i < j) {
        char tmp = s[i];
        s[i++] = s[j];
        s[j--] = tmp;
    }
}
{% endhighlight %}

[Minimum Number of Flips to Make the Binary String Alternating][minimum-number-of-flips-to-make-the-binary-string-alternating]

{% highlight java %}
public int minFlips(String s) {
    int n = s.length();
    // [parity][binary char]
    int[][] count = new int[2][2]; 
    for (int i = 0; i < s.length(); i++) {
        count[i % 2][s.charAt(i) - '0']++;
    }

    // '0' at odd + '1' at even
    // '0' at even + '1' at odd
    int flips = Math.min(count[1][0] + count[0][1], count[0][0] + count[1][1]);

    if (n % 2 == 0) {
        // the only two cases are both covered already
        return flips;
    }

    // rotates the String
    // i is the original index of the char currently at the start
    for (int i = 0; i < n; i++) {
        // removes the first char
        // swaps the parity of all the following (n - 1) chars
        // n is odd so (n - 1) is even - they are in pairs
        int[] tmp = count[0];
        count[0] = count[1];
        count[1] = tmp;

        // since n is odd
        count[1][s.charAt(i) - '0']--;  // removes the first char
        count[0][s.charAt(i) - '0']++;  // appends the first char to the end

        flips = Math.min(flips, Math.min(count[1][0] + count[0][1], count[0][0] + count[1][1]));
    }
    return flips;
}
{% endhighlight %}

# Distance

[Shortest Distance to a Character][shortest-distance-to-a-character]

{% highlight java %}
public int[] shortestToChar(String s, char c) {
    int n = s.length(), index = -n;
    int[] d = new int[n];
    // c on left
    for (int i = 0; i < n; i++) {
        if (s.charAt(i) == c) {
            index = i;
        }
        d[i] = i - index;
    }
    // c on right
    for (int i = n - 1; i >= 0; i--) {
        if (s.charAt(i) == c) {
            index = i;
        }
        d[i] = Math.min(d[i], Math.abs(index - i));
    }
    return d;
}
{% endhighlight %}

### Pre-computed

[Shortest Distance to Target Color][shortest-distance-to-target-color]

# Swapping

[Swap Adjacent in LR String][swap-adjacent-in-lr-string]

{% highlight java %}
public boolean canTransform(String start, String end) {
    int n = start.length();
    // indexes of 'L' or 'R';
    List<Integer> si = new ArrayList<>(), ei = new ArrayList<>();
    for (int i = 0; i < n; i++) {
        if (start.charAt(i) == 'L' || start.charAt(i) == 'R') {
            si.add(i);
        }
        if (end.charAt(i) == 'L' || end.charAt(i) == 'R') {
            ei.add(i);
        }
    }

    if (si.size() != ei.size()) {
        return false;
    }

    for (int i = 0; i < si.size(); i++) {
        int sIndex = si.get(i), eIndex = ei.get(i);
        char sc = start.charAt(sIndex), ec = end.charAt(eIndex);
        if (sc != ec) {
            return false;
        }

        if (sc == 'L' && sIndex < eIndex) {
            return false;
        }

        if (sc == 'R' && sIndex > eIndex) {
            return false;
        }
    }
    return true;
}
{% endhighlight %}

# Set

[Longest Consecutive Sequence][longest-consecutive-sequence]

{% highlight java %}
public int longestConsecutive(int[] nums) {
    Set<Integer> set = new HashSet<>();
    for (int num : nums) {
        set.add(num);
    }

    int length = 0;
    for (int num : set) {
        // only checks for one direction
        if (!set.contains(num - 1)) {
            int next = num + 1;
            while (set.contains(next)) {
                next++;
            }
            length = Math.max(length, next - num);
        }
    }
    return length;
}
{% endhighlight %}

# Two Passes

[Candy][candy]

{% highlight java %}
public int candy(int[] ratings) {
    int n = ratings.length;
    int[] candies = new int[n];
    // gives everyone one candy
    Arrays.fill(candies, 1);

    // left -> right
    for (int i = 1; i < n; i++) {
        if (ratings[i] > ratings[i - 1]) {
            candies[i] = candies[i - 1] + 1;
        }
    }

    int sum = candies[n - 1];
    // right -> left
    for (int i = n - 2; i >= 0; i--) {
        if (ratings[i] > ratings[i + 1]) {
            candies[i] = Math.max(candies[i], candies[i + 1] + 1);
        }
        sum += candies[i];
    }
    return sum;
}
{% endhighlight %}

[candy]: https://leetcode.com/problems/candy/
[first-missing-positive]: https://leetcode.com/problems/first-missing-positive/
[longest-consecutive-sequence]: https://leetcode.com/problems/longest-consecutive-sequence/
[minimum-number-of-flips-to-make-the-binary-string-alternating]: https://leetcode.com/problems/minimum-number-of-flips-to-make-the-binary-string-alternating/
[reverse-words-in-a-string-ii]: https://leetcode.com/problems/reverse-words-in-a-string-ii/
[rotate-array]: https://leetcode.com/problems/rotate-array/
[shift-2d-grid]: https://leetcode.com/problems/shift-2d-grid/
[shortest-distance-to-a-character]: https://leetcode.com/problems/shortest-distance-to-a-character/
[shortest-distance-to-target-color]: https://leetcode.com/problems/shortest-distance-to-target-color/
[swap-adjacent-in-lr-string]: https://leetcode.com/problems/swap-adjacent-in-lr-string/
