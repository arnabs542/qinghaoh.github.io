---
layout: post
title:  "Map"
tag: map 
---
# Methods

[NavigableMap](https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/util/NavigableMap.html)

| Prefix | Suffix | Parameter | Comparison |
|-------|--------|---------|---------|
| ceiling | entry/key | key | >= |
| floor | entry/key | key | <= |
| higher | entry/key | key | > |
| lower | entry/key | key | < |
| head | map | toKey | < |
| head | map | toKey, inclusive | < or <= |
| tail | map | fromKey | >= |
| tail | map | fromKey, inclusive | > or >= |
| (poll)first | entry | | least |
| (poll)last | entry | | greatest |
| descending | map | | |
| sub | map | fromKey, fromInclusive, toKey, toInclusive | |
| descending | keySet | | |
| navigable | keySet | | |

[SortedMap](https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/util/SortedMap.html)

| Prefix | Suffix | Parameter | Comparison |
|-------|--------|---------|---------|
| head | map | toKey | < |
| tail | map | fromKey | >= |
| first | key | | lowest |
| last | key | | highest |
| sub | map | fromKey, toKey | [) |

Note that the ordering maintained by a sorted map (whether or not an explicit comparator is provided) must be consistent with equals if the sorted map is to correctly implement the Map interface.

The ordering imposed by a comparator `c` on a set of elements `S` is said to be consistent with equals if and only if `c.compare(e1, e2)==0` has the same boolean value as `e1.equals(e2)` for every `e1` and `e2` in `S`.

## Sort Map by Values

### Ascending

{% highlight java %}
Map<String, Integer> unSortedMap = getUnSortedMap();
LinkedHashMap<String, Integer> sortedMap = new LinkedHashMap<>();
 
unSortedMap.entrySet()
    .stream()
    .sorted(Map.Entry.comparingByValue())
    .forEachOrdered(e -> sortedMap.put(e.getKey(), e.getValue()));
{% endhighlight %}

### Descending

{% highlight java %}
Map<String, Integer> unSortedMap = getUnSortedMap();
LinkedHashMap<String, Integer> sortedMap = new LinkedHashMap<>();
 
unSortedMap.entrySet()
    .stream()
    .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))
    .forEachOrdered(e -> sortedMap.put(e.getKey(), e.getValue()));
{% endhighlight %}

## Sort Map by Values then Keys

{% highlight java %}
    .sorted(Comparator.comparing(Map.Entry<String, Integer>::getValue)
            .thenComparing(Comparator.comparing(Map.Entry<String, Integer>::getKey)))
{% endhighlight %}

{% highlight java %}
    .sorted(Map.Entry.<String, Integer>comparingByValue()
            .thenComparing(Map.Entry.comparingByKey()))
{% endhighlight %}

## Key with the max value in a map
{% highlight java %}
Collections.max(map.entrySet(), Map.Entry.comparingByValue()).getKey();
{% endhighlight %}

* [default V computeIfAbsent(K key, Function\<? super K, ? extends V\> mappingFunction)](https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/util/Map.html#computeIfAbsent(K,java.util.function.Function))
* [default boolean remove(Object key, Object value)](https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/util/Map.html#remove(java.lang.Object,java.lang.Object))
* [V put(K key, V value)](https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/util/Map.html#put(K,V))
  * Returns the previous value associated with key, or null if there was no mapping for key.

# Map.Entry
* [static \<K,V extends Comparable\<? super V\>\> Comparator\<Map.Entry\<K,V\>\> comparingByValue()](https://docs.oracle.com/javase/8/docs/api/java/util/Map.Entry.html#comparingByValue--)

[Making File Names Unique][making-file-names-unique]

{% highlight java %}
public String[] getFolderNames(String[] names) {
    String[] folders = new String[names.length];
    // name: smallest valid integer
    Map<String, Integer> map = new HashMap<>();
    for (int i = 0; i < names.length; i++) {
        String curr = names[i];
        int count = map.getOrDefault(curr, 1);
        while (map.containsKey(curr)) {
            curr = names[i] + "(" + count++ + ")";
        }
        map.put(curr, 1);
        map.put(names[i], count);
        folders[i] = curr;
    }
    return folders;
}
{% endhighlight %}

[Vowel Spellchecker][vowel-spellchecker]

{% highlight java %}
public String[] spellchecker(String[] wordlist, String[] queries) {
    Set<String> words = new HashSet<>();
    Map<String, String> cap = new HashMap<>(), vowel = new HashMap<>();

    for (String w : wordlist) {
        words.add(w);
        String lower = w.toLowerCase(), devowel = lower.replaceAll("[aeiou]", "#");
        cap.putIfAbsent(lower, w);
        vowel.putIfAbsent(devowel, w);
    }

    int n = queries.length;
    String[] result = new String[n];
    for (int i = 0; i < n; i++) {
        String q = queries[i];
        if (words.contains(q)) {
            result[i] = q;
            continue;
        }

        String lower = q.toLowerCase(), devowel = lower.replaceAll("[aeiou]", "#");
        if (cap.containsKey(lower)) {
            result[i] = cap.get(lower);
            continue;
        }

        if (vowel.containsKey(devowel)) {
            result[i] = vowel.get(devowel);
            continue;
        }
        result[i] = "";
    }
    return result;
}
{% endhighlight %}

[making-file-names-unique]: https://leetcode.com/problems/making-file-names-unique/
[vowel-spellchecker]: https://leetcode.com/problems/vowel-spellchecker/
