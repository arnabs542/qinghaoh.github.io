---
layout: post
title:  "Map"
tag: map 
---
[NavigableMap](https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/util/NavigableMap.html)

| Prefix | Suffix | Parameter | Comparison |
|-------|--------|---------|---------|
| ceiling | entry/key | key | >= |
| floor | entry/key | key | <= |
| higher | entry/key | key | > |
| lower | entry/key | key | < |
| head | map | toKey | < |
| head | map | toKey, inclusive | < or <= |
| tail | map | fromKey | >= |
| tail | map | fromKey, inclusive | > or >= |
| (poll)first | entry | | least |
| (poll)last | entry | | greatest |
| descending | map | | |
| sub | map | fromKey, fromInclusive, toKey, toInclusive | |
| descending | keySet | | |
| navigable | keySet | | |

[SortedMap](https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/util/SortedMap.html)

| Prefix | Suffix | Parameter | Comparison |
|-------|--------|---------|---------|
| head | map | toKey | < |
| tail | map | fromKey | >= |
| first | key | | lowest |
| last | key | | highest |
| sub | map | fromKey, toKey | [) |

## Sort Map by Values

### Ascending

{% highlight java %}
Map<String, Integer> unSortedMap = getUnSortedMap();
LinkedHashMap<String, Integer> sortedMap = new LinkedHashMap<>();
 
unSortedMap.entrySet()
    .stream()
    .sorted(Map.Entry.comparingByValue())
    .forEachOrdered(e -> sortedMap.put(e.getKey(), e.getValue()));
{% endhighlight %}

### Descending

{% highlight java %}
Map<String, Integer> unSortedMap = getUnSortedMap();
LinkedHashMap<String, Integer> sortedMap = new LinkedHashMap<>();
 
unSortedMap.entrySet()
    .stream()
    .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))
    .forEachOrdered(e -> sortedMap.put(e.getKey(), e.getValue()));
{% endhighlight %}

## Sort Map by Values then Keys

{% highlight java %}
    .sorted(Comparator.comparing(Map.Entry<String, Integer>::getValue)
            .thenComparing(Comparator.comparing(Map.Entry<String, Integer>::getKey)))
{% endhighlight %}

{% highlight java %}
    .sorted(Map.Entry.<String, Integer>comparingByValue()
            .thenComparing(Map.Entry.comparingByKey()))
{% endhighlight %}

## Key with the max value in a map
{% highlight java %}
Collections.max(map.entrySet(), Map.Entry.comparingByValue()).getKey();
{% endhighlight %}

* [default V computeIfAbsent(K key, Function\<? super K, ? extends V\> mappingFunction)](https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/util/Map.html#computeIfAbsent(K,java.util.function.Function))
* [default boolean remove(Object key, Object value)](https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/util/Map.html#remove(java.lang.Object,java.lang.Object))
* [V put(K key, V value)](https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/util/Map.html#put(K,V))
  * Returns the previous value associated with key, or null if there was no mapping for key.

# Map.Entry
* [static \<K,V extends Comparable\<? super V\>\> Comparator\<Map.Entry\<K,V\>\> comparingByValue()](https://docs.oracle.com/javase/8/docs/api/java/util/Map.Entry.html#comparingByValue--)

