---
layout: post
title:  "Game"
---
[Stone Game][stone-game]

{% highlight java %}
public boolean stoneGame(int[] piles) {
    int n = piles.length;
    // the largest number of stones one can get more than opponent
    int[][] dp  = new int[n][n];
    for (int i = 0; i < n; i++) {
        dp[i][i] = piles[i];
    }

    for (int d = 1; d < n; d++) {
        for (int i = 0; i + d < n; i++) {
            dp[i][i + d] = Math.max(piles[i] - dp[i + 1][i + d], piles[i + d] - dp[i][i + d - 1]);
        }
    }
    return dp[0][n - 1] > 0;
}
{% endhighlight %}

1D:

{% highlight java %}
public boolean stoneGame(int[] piles) {
    int n = piles.length;
    int[] dp = Arrays.copyOf(piles, n);
    for (int d = 1; d < n; d++) {
        for (int i = 0; i + d < n; i++) {
            dp[i] = Math.max(piles[i] - dp[i + 1], piles[i + d] - dp[i]);
        }
    }
    return dp[0] > 0;
}
{% endhighlight %}

Alex can always take either all odd piles or all even piles, and one of the colors must have a sum number of stones larger than the other color.

[stone-game]: https://leetcode.com/problems/stone-game/
