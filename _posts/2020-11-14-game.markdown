---
layout: post
title:  "Game"
---
# Dynamic Programming

[Stone Game][stone-game]

{% highlight java %}
public boolean stoneGame(int[] piles) {
    int n = piles.length;
    // the largest number of stones one can get more than opponent
    int[][] dp  = new int[n][n];
    for (int i = 0; i < n; i++) {
        dp[i][i] = piles[i];
    }

    for (int d = 1; d < n; d++) {
        for (int i = 0; i + d < n; i++) {
            dp[i][i + d] = Math.max(piles[i] - dp[i + 1][i + d], piles[i + d] - dp[i][i + d - 1]);
        }
    }
    return dp[0][n - 1] > 0;
}
{% endhighlight %}

1D:

{% highlight java %}
public boolean stoneGame(int[] piles) {
    int n = piles.length;
    int[] dp = Arrays.copyOf(piles, n);
    for (int d = 1; d < n; d++) {
        for (int i = 0; i + d < n; i++) {
            dp[i] = Math.max(piles[i] - dp[i + 1], piles[i + d] - dp[i]);
        }
    }
    return dp[0] > 0;
}
{% endhighlight %}

Alex can always take either all odd piles or all even piles, and one of the colors must have a sum number of stones larger than the other color.

# Greedy

[Stone Game VI][stone-game-vi]

{% highlight java %}
public int stoneGameVI(int[] aliceValues, int[] bobValues) {
    int n = aliceValues.length, diff = 0;
    int[] sum = new int[n];
    for (int i = 0; i < n; i++) {
        sum[i] = aliceValues[i] + bobValues[i];
        // Bob takes all stones first
        diff -= bobValues[i];
    }

    Arrays.sort(sum);
    for (int i =  n - 1; i >= 0; i -= 2) {
        diff += sum[i];
    }

    return Integer.compare(diff, 0);
}
{% endhighlight %}

# Top-down DP

[Can I Win][can-i-win]

{% highlight java %}
private int maxChoosableInteger;
private Map<Integer, Boolean> map = new HashMap<>();

public boolean canIWin(int maxChoosableInteger, int desiredTotal) {
    this.maxChoosableInteger = maxChoosableInteger;

    if (desiredTotal == 0) {
        return true;
    }

    if (maxChoosableInteger * (maxChoosableInteger + 1) / 2 < desiredTotal) {
        return false;
    }

    return dfs(desiredTotal, 0);
}

private boolean dfs(int total, int state) {
    if (map.containsKey(state)) {
        return map.get(state);
    }

    boolean canWin = false;
    for (int i = maxChoosableInteger; i > 0; i--) {
        if ((state & (1 << (i - 1))) == 0) {
            // can't force a win == lose
            // because both players play optimally
            if (i >= total || !dfs(total - i, state | (1 << (i - 1)))) {
                canWin = true;
                break;
            }
        }
    }
    map.put(state, canWin);
    return canWin;
}
{% endhighlight %}

[Flip Game II][flip-game-ii]

[Stone Game II][stone-game-ii]

{% highlight java %}
private int[] p;
private int[][] memo;

public int stoneGameII(int[] piles) {
    p = new int[piles.length + 1];
    memo = new int[piles.length][piles.length + 1];

    for (int i = 0; i < piles.length; i++) {
        p[i + 1] = p[i] + piles[i];
    }

    return helper(piles, 0, 1);
}

private int helper(int[] piles, int start, int m) {
    if (start == piles.length) {
        return 0;
    }

    if (memo[start][m] > 0) {
        return memo[start][m];
    }

    int max = 0;
    for (int x = 1; x <= Math.min(2 * m, piles.length - start); x++) {
        max = Math.max(max, p[p.length - 1] - p[start] - helper(piles, start + x, Math.max(m, x)));
    }

    return memo[start][m] = max;
}
{% endhighlight %}

# Sprague–Grundy Theorem

[Combinatorial game theory](https://en.wikipedia.org/wiki/Combinatorial_game_theory)

Combinatorial game theory (CGT) has been largely confined to two-player games that have a position in which the players take turns changing in defined ways or moves to achieve a defined winning condition.

[Impartial game](https://en.wikipedia.org/wiki/Impartial_game)

In combinatorial game theory, an impartial game is a game in which the allowable moves depend only on the position and not on which of the two players is currently moving, and where the payoffs are symmetric. In other words, the only difference between player 1 and player 2 is that player 1 goes first.

[Normal play convention](https://en.wikipedia.org/wiki/Normal_play_convention)

In combinatorial game theory, the normal play convention of an impartial game is that the last player able to move is the winner.

[Nim](https://en.wikipedia.org/wiki/Nim)

Nim is a mathematical game of strategy in which two players take turns removing (or "nimming") objects from distinct heaps or piles. On each turn, a player must remove at least one object, and may remove any number of objects provided they all come from the **same** heap or pile. The game is either to take the last object.

Nim-sum is the bitwise xor of the heap sizes.

**Theorem**: In a normal Nim game, the player making the first move has a winning strategy if and only if the nim-sum of the sizes of the heaps is **not zero**. Otherwise, the second player has a winning strategy.

Strategy: the winning strategy is to finish every move with a nim-sum of 0. This is always possible if the nim-sum is not zero before the move. To find out which move to make, let `X` be the nim-sum of all the heap sizes. Find a heap where `X \xor heap-size < heap-size`; the winning strategy is to play in such a heap, reducing that heap to `X \xor heap-size`.

[Nimber](https://en.wikipedia.org/wiki/Nimber)

In mathematics, the nimbers, also called Grundy numbers, are the values of heaps in the game Nim.

The Grundy Number/ nimber is equal to 0 for a game that is lost immediately by the first player and is equal to Mex of the nimbers of all possible next positions for any other game.

[Mex](https://en.wikipedia.org/wiki/Mex_(mathematics))

In mathematics, the mex of a subset of a well-ordered set is the smallest value from the whole set that does not belong to the subset. That is, it is the minimum value of the complement set. The name "mex" is shorthand for "minimum excluded" value.

[Sprague–Grundy theorem](https://en.wikipedia.org/wiki/Sprague%E2%80%93Grundy_theorem)

In combinatorial game theory, the Sprague–Grundy theorem states that every impartial game under the normal play convention is equivalent to a one-heap game of nim, or to an infinite generalization of nim.

Then Sprague-Grundy Theorem says that if both A and B play optimally, then the player starting first is guaranteed to win if the XOR of the grundy numbers of position in each sub-games at the beginning of the game is non-zero. Otherwise, if the XOR evaluates to zero, then player A will lose definitely, no matter what.

{% highlight java %}
// O(n ^ 2)
public boolean canWin(String s) {
    int sg = 0;
    List<Integer> nimbers = new ArrayList<>();
    // DP to get nimbers
    for (String t : s.split("-+")) {
        int n = t.length();
        // t is consecutive '+'s
        if (n != 0) {
            while (nimbers.size() <= n) {
                char[] chars = t.toCharArray();
                int i = 0, j = nimbers.size() - 2;
                // g(t) = mex(g(0, n - 2), g(1, n - 3), ...)
                //      = mex(g(0) ^ g(n - 2), g(1) ^ g(n - 3), ...)
                //
                // chars marks the presence of nimbers of all sub-game states
                // chars[i] == '-': sub-game nimber i exists
                while (i <= j) {
                    chars[nimbers.get(i++) ^ nimbers.get(j--)] = '-';
                }  
                // mex
                nimbers.add(new String(chars).indexOf('+'));
            }
            sg ^= nimbers.get(n);
        }
    }
    return sg != 0;
}
{% endhighlight %}

{% highlight java %}
// O(n)
public boolean canWin(String s) {
    // https://oeis.org/A002187
    // Has period 34 with the only exceptions at n=0, 14, 16, 17, 31, 34 and 51.
    // our definition is shifted by 1, so the last exception is nimbers[52]
    int p = 34, n = 51 + 1 + p;
    int[] nimbers = new int[n + 1];
    for (int k = 2; k <= n; k++) {
        char[] chars = "+".repeat(k).toCharArray();
        int i = 0, j = k - 2;
        while (i <= j) {
            chars[nimbers[i++] ^ nimbers[j--]] = '-';
        }
        nimbers[k] = new String(chars).indexOf('+');
    }

    int sg = 0;
    for (String t : s.split("-+")) {
        // t is consecutive '+'s
        int len = t.length();
        while (len > n) {
            len -= p;
        }
        sg ^= nimbers[len];
    }
    return sg != 0;
}
{% endhighlight %}

[can-i-win]: https://leetcode.com/problems/can-i-win/
[flip-game-ii]: https://leetcode.com/problems/flip-game-ii/
[stone-game]: https://leetcode.com/problems/stone-game/
[stone-game-ii]: https://leetcode.com/problems/stone-game-ii/
[stone-game-vi]: https://leetcode.com/problems/stone-game-vi/
