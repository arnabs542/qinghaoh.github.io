---
layout: post
title:  "Stack"
tags: stack
---
# Monotonic Stack

[Remove K Digits][remove-k-digits]

Use StringBuilder as a stack.

{% highlight java %}
public String removeKdigits(String num, int k) {
    StringBuilder sb = new StringBuilder();
    for (char c : num.toCharArray()) {
        // monotonically increasing stack
        while (sb.length() > 0 && c < sb.charAt(sb.length() - 1) && k > 0) {
            sb.deleteCharAt(sb.length() - 1);
            k--;
        }

        // if c == '0', all elements in the stack are '0'
        if (sb.length() == 0 && c == '0') {
            continue;
        }
        sb.append(c);
    }

    while (k > 0 && sb.length() > 0) {
        sb.deleteCharAt(sb.length() - 1);
        k--;
    }
    return sb.length() == 0 ? "0" : sb.toString();
}
{% endhighlight %}

[Find the Most Competitive Subsequence][find-the-most-competitive-subsequence]

Use array as a stack.

{% highlight java %}
public int[] mostCompetitive(int[] nums, int k) {
    int[] stack = new int[k];
    // j is stack size
    for (int i = 0, j = 0; i < nums.length; i++) {
        // (nums.length - i) remaining numbers
        while (j > 0 && stack[j - 1] > nums[i] && nums.length - i + j > k) {
            j--;
        }   
        if (j < k) {
            stack[j++] = nums[i];
        }   
    }
    return stack;
}
{% endhighlight %}

[Create Maximum Number][create-maximum-number]

{% highlight java %}
public int[] maxNumber(int[] nums1, int[] nums2, int k) {
    int n1 = nums1.length, n2 = nums2.length;
    int[] result = new int[k];
    // picks i digits from nums1
    // picks (k - i) digits from nums2
    // 0 <= i <= k
    // 0 <= i <= n1
    // 0 <= k - i <= n2 => i >= k - n2
    for (int i = Math.max(0, k - n2); i <= Math.min(k, n1); i++) {
        int[] candidate = merge(maxArray(nums1, i), maxArray(nums2, k - i), k);
        if (isGreaterThanOrEqualTo(candidate, 0, result, 0)) {
            result = candidate;
        }
    }
    return result;
}

private int[] merge(int[] nums1, int[] nums2, int k) {
    int[] result = new int[k];
    int i = 0, j = 0, index = 0;
    while (index < k) {
        result[index++] = isGreaterThanOrEqualTo(nums1, i, nums2, j) ? nums1[i++] : nums2[j++];
    }
    return result;
}

// Check if nums1[i:] >= nums2[j:]
private boolean isGreaterThanOrEqualTo(int[] nums1, int i, int[] nums2, int j) {
    int n1 = nums1.length, n2 = nums2.length;
    while (i < n1 && j < n2 && nums1[i] == nums2[j]) {
        i++;
        j++;
    }
    return j == n2 || (i < n1 && nums1[i] >= nums2[j]);
}

/**
 * Creates the maximum number of length k from digits of the array.
 * @param nums number represented as an array
 * @param k length of the result number
 * @return the maximum number represented as an array
 */
private int[] maxArray(int[] nums, int k) {
    int n = nums.length;
    Deque<Integer> st = new ArrayDeque<Integer>();
    for (int i = 0; i < n; i++) {
        // monotonically decreasing stack
        // st.size + n - i > k means if we push all the remaining digits to the stack
        // the stack size will be greater than k
        // so we need to pop the stack to make room
        while (st.size() + n - i > k && !st.isEmpty() && nums[i] > st.peek()) {
            st.pop();
        }
        if (st.size() < k) {
            st.push(nums[i]);
        }
    }

    int[] result = new int[k];
    for (int i = k - 1; i >= 0; i--) {
        result[i] = st.pop();
    }
    return result;
}
{% endhighlight %}

Use array as a stack:

{% highlight java %}
private int[] maxArray(int[] nums, int k) {
    int n = nums.length;
    // this array is used as a stack, too
    int[] result = new int[k];
    for (int i = 0, j = 0; i < n; i++) {
        while (n - i + j > k && j > 0 && nums[i] > result[j - 1]) {
            j--;
        }

        if (j < k) {
            result[j++] = nums[i];
        }
    }
    return result;
}
{% endhighlight %}

[Number of Valid Subarrays][number-of-valid-subarrays]

{% highlight java %}
public int validSubarrays(int[] nums) {
    int count = 0;
    Deque<Integer> st = new ArrayDeque<>();
    for (int num : nums) {
        while (!st.isEmpty() && num < st.peek()) {
            st.pop();
        }
        st.push(num);
        count += st.size();
    }
    return count;
}
{% endhighlight %}

[Jump Game V][jump-game-v]

It's easy to come up with an `O(nd)` top-down DP solution.

{% highlight java %}
// O(n)
public int maxJumps(int[] arr, int d) {
    int n = arr.length;

    // dp[i]: max number of indices we can visit from index i
    int[] dp = new int[n];
    Arrays.fill(dp, 1);

    // stack1 is the main stack
    Deque<Integer> st1 = new ArrayDeque<>(), st2 = new ArrayDeque<>();
    for (int i = 0; i <= n; i++) {
        // stack1 is monotonically decreasing
        // starts popping stack1 when the next element is greater, or it's the end of the array
        while (!st1.isEmpty() && (i == n || arr[i] > arr[st1.peek()])) {
            // top of the stack
            int top = arr[st1.peek()];

            // pops all indices in the stack whose elements equal top
            while (!st1.isEmpty() && top == arr[st1.peek()]) {
                // i -> j is a valid jump
                int j = st1.pop();
                if (i < n && i - j <= d) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }

                // pushes the current index to the stack2
                st2.push(j);
            }

            // stack2 stores all the indices whose elements equal the previous stack1.top
            // pops and processes each
            while (!st2.isEmpty()) {
                int j = st2.pop();
                // current stack1.top -> previous top is a valid jump
                if (!st1.isEmpty() && j - st1.peek() <= d) {
                    dp[st1.peek()] = Math.max(dp[st1.peek()], dp[j] + 1);
                }
            }
        }
        st1.push(i);
    }

    return Arrays.stream(dp).max().getAsInt();
}
{% endhighlight %}

## Previous/Next Less/Greater Element

### Templates

#### Previous Less Element

{% highlight java %}
Deque<Integer> st = new ArrayDeque<>();
int[] prev = new int[n];

for (int i = 0; i < n; i++) {
    // monotonically increasing stack
    // non-strictly less
    while (!st.isEmpty() && nums[i] < nums[st.peek()]) {
        st.pop();
    }
    prev[i] = st.isEmpty() ? -1 : st.peek();
    st.push(i);
}
{% endhighlight %}

#### Next Less Element

{% highlight java %}
Deque<Integer> st = new ArrayDeque<>();
int[] next = new int[n];
Arrays.fill(next, -1);

for (int i = 0; i < n; i++) {
    // monotonically increasing stack
    // strictly less
    while (!st.isEmpty() && nums[i] < nums[st.peek()]) {
        next[st.pop()] = i;
    }
    st.push(i);
}
{% endhighlight %}

|                | Previous < | Previous <= |  Next <  |  Next <=  | 
|----------------|------------|-------------|----------|-----------|
|Monotonic Stack | Increasing | Increasing  |Increasing|Increasing |
|Stack Strictness|   Strict   | Non-strict  |Non-strict|  Strict   |
|   Condition    |a[i] <= top | a[i] < top  |a[i] < top|a[i] <= top|

[Final Prices With a Special Discount in a Shop][final-prices-with-a-special-discount-in-a-shop]

{% highlight java %}
public int[] finalPrices(int[] prices) {
    int n = prices.length;
    int[] result = Arrays.copyOf(prices, n);

    // next less element
    Deque<Integer> st = new ArrayDeque<>();
    for (int i = 0; i < n; i++) {
        while (!st.isEmpty() && result[i] <= result[st.peek()]) {
            result[st.pop()] -= result[i];
        }
        st.push(i);
    }
    return result;
}
{% endhighlight %}

[Sum of Subarray Minimums][sum-of-subarray-minimums]

{% highlight java %}
private int MOD = (int)1e9 + 7;

public int sumSubarrayMins(int[] arr) {
    int n = arr.length;
    // left[i]:  distance between arr[i] and its previous less element (prev, arr[i]]
    // right[i]: distance between arr[i] and its next less element [arr[i], next)
    int[] left = new int[n], right = new int[n];
    for (int i = 0; i < n; i++) {
        right[i] = n - i;
    }

    // element : index
    Deque<Integer> st1 = new ArrayDeque<>(), st2 = new ArrayDeque<>();
    int result = 0;

    for (int i = 0; i < n; i++) {
        // previous less element (non-strict)
        while (!st1.isEmpty() && arr[i] < arr[st1.peek()]) {
            st1.pop();
        }
        left[i] = i - (st1.isEmpty() ? -1 : st1.peek());
        st1.push(i);

        // next less element (strict)
        while (!st2.isEmpty() && arr[i] < arr[st2.peek()]) {
            int index = st2.pop();
            right[index] = i - index;
        }
        st2.push(i);
    }

    for (int i = 0; i < n; i++) {
        result = (result + arr[i] * left[i] * right[i]) % MOD;
    }
    return result;
}
{% endhighlight %}

{% highlight java %}
private int MOD = (int)1e9 + 7;

public int sumSubarrayMins(int[] A) {
    Deque<Integer> st = new ArrayDeque<>();
    int result = 0;
    for (int i = 0; i <= A.length; i++) {
        // when A is at the end, set i as 0 so that all stack elements are popped
        while (!st.isEmpty() && A[st.peek()] > (i == A.length ? 0 : A[i])) {
            int j = st.pop();
            int k = st.isEmpty() ? -1 : st.peek();
            result = (result + A[j] * (i - j) * (j - k)) % MOD;
        }
        st.push(i);
    }
    return result;
}
{% endhighlight %}

Similarly, with Monotonically Increasing Stack, we can get Previous Greater Element or Next Greater Element.

|                | Previous > | Previous >= |  Next >  |  Next >=  | 
|----------------|------------|-------------|----------|-----------|
|Monotonic Stack | Decreasing | Decreasing  |Decreasing|Decreasing |
|Stack Strictness|   Strict   | Non-strict  |Non-strict|  Strict   |
|   Condition    |a[i] >= top | a[i] > top  |a[i] > top|a[i] >= top|

[Next Greater Element II][next-greater-element-ii]

[Next Greater Node in Linked List][next-greater-node-in-linked-list]

[Online Stock Span][online-stock-span]

{% highlight java %}
private Deque<int[]> st;

public StockSpanner() {
    st = new ArrayDeque<>();
}

public int next(int price) {
    int count = 1;
    while (!st.isEmpty() && price >= st.peek()[0]) {
        count += st.pop()[1];
    }
    st.push(new int[]{price, count});
    return count;
}
{% endhighlight %}

[Minimum Cost Tree From Leaf Values][minimum-cost-tree-from-leaf-values]

{% highlight java %}
public int mctFromLeafValues(int[] arr) {
    Deque<Integer> st = new ArrayDeque<>();
    st.push(Integer.MAX_VALUE);

    int sum = 0;
    for (int a : arr) {
        // previous and next greater element
        while (st.peek() <= a) {
            int top = st.pop();
            sum += top * Math.min(st.peek(), a);
        }
        st.push(a);
    }

    while (st.size() > 2) {
        sum += st.pop() * st.peek();
    }

    return sum;
}
{% endhighlight %}

[Number of Visible People in a Queue][number-of-visible-people-in-a-queue]

{% highlight java %}
public int[] canSeePersonsCount(int[] heights) {
    int n = heights.length;
    int[] answer = new int[n];
    Deque<Integer> st = new ArrayDeque<>();
    for (int i = 0; i < n; i++) {
        // monotonically decreasing stack
        // next greater (>=) element
        while (!st.isEmpty() && heights[i] >= heights[st.peek()]) {
            // st.peek() can see i
            // st.peek() can't see after i, so we've done for st.peek().
            // pops it
            answer[st.pop()]++;
        }

        if (!st.isEmpty()) {
            // previous less (<) element
            // st.peek() can see i
            answer[st.peek()]++;
        }

        st.push(i);
    }

    return answer;
}
{% endhighlight %}

[Maximum Width Ramp][maximum-width-ramp]

{% highlight java %}
public int maxWidthRamp(int[] A) {
    // decreasing stack
    Deque<Integer> st = new ArrayDeque<>();
    int max = 0, n = A.length;
    for (int i = 0; i < n; i++) {
        if (st.isEmpty() || A[i] < A[st.peek()]) {
            st.push(i);
        }
    }

    for (int i = n - 1; i > max; i--) {
        while (!st.isEmpty() && A[i] >= A[st.peek()]) {
            // i is the largest index with A[i] >= stack top
            // so it's safe to pop
            max = Math.max(max, i - st.pop());
        }
    }
    return max;
}
{% endhighlight %}

# Histogram

[Largest Rectangle in Histogram][largest-rectangle-in-histogram]

{% highlight java %}
public int largestRectangleArea(int[] heights) {
    // index of non-descreasing heights
    Deque<Integer> st = new ArrayDeque<>();
    st.push(-1);  // makes width concise

    int area = 0;
    for (int i = 0; i <= heights.length; i++) {            
        int height = (i == heights.length ? 0 : heights[i]);
        while (st.peek() >= 0 && height < heights[st.peek()]) {
            // popped heights are no less than current height
            int h = heights[st.pop()];
            int w = i - 1 - st.peek();
            area = Math.max(area, h * w);
        }
        st.push(i);
    }
    return area;
}
{% endhighlight %}

```
[2,1,5,6,2,3]
i = 0	[0]				area = 0
i = 1	[]		h * w = 2	area = 2
i = 1	[1]				area = 2
i = 2	[2,1]				area = 2
i = 3	[3,2,1]				area = 2
i = 4	[2,1]		h * w = 6	area = 6
i = 4	[1]		h * w = 10	area = 10
i = 4	[4,1]				area = 10
i = 5	[5,4,1]				area = 10
i = 6	[4,1]		h * w = 3	area = 10
i = 6	[1]		h * w = 8	area = 10
i = 6	[]		h * w = 6	area = 10
i = 6	[6]				area = 10
```

[Maximal Rectangle][maximal-rectangle]

{% highlight java %}
public int maximalRectangle(char[][] matrix) {
    if (matrix.length == 0) {
        return 0;
    }

    int m = matrix.length, n = matrix[0].length;
    int area = 0;
    int[] height = new int[n + 1];

    for (int i = 0; i < m; i++) {
        Deque<Integer> st = new ArrayDeque<>();
        st.push(-1);

        for (int j = 0; j <= n; j++) {
            // histogram height array in each row
            if (j < n && matrix[i][j] == '1') {
                height[j]++;
            } else {
                height[j] = 0;
            }

            while (!st.isEmpty() && height[j] < height[st.peek()]) {
                int h = height[st.pop()];
                int w = j - 1 - st.peek();
                area = Math.max(area, h * w);
            }
            st.push(j);
        }
    }

    return area;
}
{% endhighlight %}

[Count Submatrices With All Ones][count-submatrices-with-all-ones]

{% highlight java %}
public int numSubmat(int[][] mat) {
    int m = mat.length, n = mat[0].length;
    int count = 0;
    int[] height = new int[n + 1];

    for (int i = 0; i < m; i++) {
        Deque<Integer> st = new ArrayDeque<>();
        st.push(-1);

        int sum = 0;
        for (int j = 0; j <= n; j++) {
            // histogram height array in each row
            if (j < n && mat[i][j] == 1) {
                height[j]++;
            } else {
                height[j] = 0;
            }

            while (st.peek() >= 0 && height[j] < height[st.peek()]) {
                int index = st.pop();
                sum -= height[index] * (index - st.peek());
            }

            // height[j] as right boundary
            sum += height[j] * (j - st.peek());
            count += sum;
            st.push(j);
        }
    }

    return count;
}
{% endhighlight %}

[Remove Duplicate Letters][remove-duplicate-letters]

{% highlight java %}
public String removeDuplicateLetters(String s) {
    // last index
    int[] last = new int[26];
    for (int i = 0; i < s.length(); ++i) {
        last[s.charAt(i) - 'a'] = i;
    }

    Deque<Integer> st = new ArrayDeque<>();
    // if visited is true, it's already in the stack
    boolean[] visited = new boolean[26];
    for (int i = 0; i < s.length(); i++) {
        int c = s.charAt(i) - 'a';
        if (!visited[c]) {
            // if c is greater than stack top, and the top appears later,
            // pops the top
            while (!st.isEmpty() && st.peek() > c && i < last[st.peek()]) {
                visited[st.pop()] = false;
            }
            st.push(c);
            visited[c] = true;
        }
    }

    StringBuilder sb = new StringBuilder();
    for (int i : st) {
        sb.append((char)('a' + i));
    }
    return sb.reverse().toString();
}
{% endhighlight %}

[132 Pattern][132-pattern]

{% highlight java %}
public boolean find132pattern(int[] nums) {
    Deque<Integer> st = new ArrayDeque<>();
    int mid = Integer.MIN_VALUE;
    for (int i = nums.length - 1; i >= 0; i--) {
        if (nums[i] < mid) {
            return true;
        }

        // monotonically decreasing stack
        // finds the largest mid for the current high (nums[i])
        while (!st.isEmpty() && nums[i] > st.peek()) {
            mid = st.pop(); 
        }
        st.push(nums[i]);
    }
    return false;
}
{% endhighlight %}

[Reverse Substrings Between Each Pair of Parentheses][reverse-substrings-between-each-pair-of-parentheses]

{% highlight java %}
public String reverseParentheses(String s) {
    Deque<Integer> st = new ArrayDeque<>();
    int[] pairs = new int[s.length()];
    for (int i = 0; i < s.length(); ++i) {
        if (s.charAt(i) == '(')
            st.push(i);
        if (s.charAt(i) == ')') {
            int j = st.pop();
            pairs[i] = j;
            pairs[j] = i;
        }
    }

    StringBuilder sb = new StringBuilder();
    for (int i = 0, d = 1; i < s.length(); i += d) {
        if (s.charAt(i) == '(' || s.charAt(i) == ')') {
            i = pairs[i];
            d = -d;  // changes direction
        } else {
            sb.append(s.charAt(i));
        }
    }

    return sb.toString();
}
{% endhighlight %}

# Regress to Counter

[Remove Outermost Parentheses][remove-outermost-parentheses]

{% highlight java %}
public string removeouterparentheses(string s) {
    stringbuilder sb = new stringbuilder();
    int open = 0;
    for (char c : s.tochararray()) {
        if ((c == '(' && open++ > 0) || (c == ')' && --open > 0)) {
            sb.append(c);
        }
    }
    return sb.tostring();
}
{% endhighlight %}

[Minimum Add to Make Parentheses Valid][minimum-add-to-make-parentheses-valid]

{% highlight java %}
public int minAddToMakeValid(String S) {
    int notOpened = 0;  // '(' needed to make the String balanced
    int notClosed = 0;  // ')' needed to make the String balanced
    for (char c : S.toCharArray()) {
        if (c == '(') {
            notClosed++;
        } else if (notClosed == 0) {
            notOpened++;
        } else {
            notClosed--;
        }
    }

    return notOpened + notClosed;
}
{% endhighlight %}

[Minimum Insertions to Balance a Parentheses String][minimum-insertions-to-balance-a-parentheses-string]

{% highlight java %}
public int minInsertions(String s) {
    int count = 0;
    int notClosed = 0;  // ')' needed to make the String balanced
    for (char c : s.toCharArray()) {
        if (c == '(') {
            if (notClosed % 2 > 0) {
                notClosed--;
                count++;
            }
            notClosed += 2;
        } else {
            notClosed--;
            if (notClosed < 0) {
                notClosed += 2;
                count++;
            }
        }
    }

    return count + notClosed;
}
{% endhighlight %}

[Maximum Nesting Depth of Two Valid Parentheses Strings][maximum-nesting-depth-of-two-valid-parentheses-strings]

{% highlight java %}
public int[] maxDepthAfterSplit(String seq) {
    int[] result = new int[seq.length()];
    int opened = 0;
    for (int i = 0; i < seq.length(); i++) {
        if (seq.charAt(i) == '(') {
            opened++;
        }

        result[i] = opened % 2;  // split by parity

        if (seq.charAt(i) == ')') {
            opened--;
        }
    }

    return result;
}
{% endhighlight %}

[Score of Parentheses][score-of-parentheses]

{% highlight java %}
public int scoreOfParentheses(String S) {
    Deque<Integer> st = new ArrayDeque<>();
    int curr = 0;
    for (char c : S.toCharArray()) {
        if (c == '(') {
            st.push(curr);
            curr = 0;
        } else {
            curr = st.pop() + Math.max(curr * 2, 1);
        }
    }
    return curr;
}
{% endhighlight %}

{% highlight java %}
public int scoreOfParentheses(String S) {
    int score = 0, opened = 0;
    for (int i = 0; i < S.length(); i++) {
        if (S.charAt(i) == '(') {
            opened++;
        } else {
            opened--;
            if (S.charAt(i - 1) == '(') {
                // number of exterior sets of parentheses that contains this core
                score += 1 << opened;
            }
        }
    }
    return score;
}
{% endhighlight %}

[Longest Valid Parentheses][longest-valid-parentheses]

TODO: what's the invariant/intuiation behind this?

{% highlight java %}
public int longestValidParentheses(String s) {
    Deque<Integer> st = new ArrayDeque<>();
    st.push(-1);  // imagine there's a ')' at index -1

    int max = 0;
    for (int i = 0; i < s.length(); i++) {
        if (s.charAt(i) == '(') {
            st.push(i);
        } else {
            st.pop();
            if (st.isEmpty()) {
                st.push(i);
            } else {
                max = Math.max(max, i - st.peek());
            }
        }
    }
    return max;
}
{% endhighlight %}

[Flatten Nested List Iterator][flatten-nested-list-iterator]

{% highlight java %}
private Deque<NestedInteger> st;

public NestedIterator(List<NestedInteger> nestedList) {
    st = new ArrayDeque<>();
    pushToStack(nestedList);
}

@Override
public Integer next() {
    // caller doesn't necessarily calls hasNext() before next()
    return hasNext() ? st.pop().getInteger() : null;
}

@Override
public boolean hasNext() {
    while (!st.isEmpty()) {
        if (st.peek().isInteger()) {
            return true;
        }
        pushToStack(st.pop().getList());
    }
    return false;
}

private void pushToStack(List<NestedInteger> nestedList) {
    for (int i = nestedList.size() - 1; i >= 0; i--) {
        st.push(nestedList.get(i));
    }
}
{% endhighlight %}

[Ternary Expression Parser][ternary-expression-parser]

{% highlight java %}
public String parseTernary(String expression) {
    Deque<Character> st = new ArrayDeque<>();
    char op = ' ';
    for (int i = expression.length() - 1; i >= 0; i--) {
        char c = expression.charAt(i);
        if (c == '?' || c == ':') {
            op = c;
        } else {
            if (op == '?') {
                char c1 = st.pop(), c2 = st.pop();
                st.push(c == 'T' ? c1 : c2);
            } else {
                st.push(c);
            }
        }
    }
    return String.valueOf(st.peek());
}
{% endhighlight %}

# Parsing

[Basic Calculator][basic-calculator]

{% highlight java %}
public int calculate(String s) {
    // stores operands and signs alternatively
    Deque<Integer> stack = new ArrayDeque<>();
    int result = 0;
    int operand = 0, sign = 1;

    for (char c : s.toCharArray()) {
        if (Character.isDigit(c)) {
            operand = 10 * operand + c - '0';
        } else if (c == '+' || c == '-') {
            result += sign * operand;
            sign = c == '+' ? 1 : -1;
            operand = 0;
        } else if (c == '(') {
            stack.push(result);
            stack.push(sign);
            sign = 1;
            result = 0;
        } else if (c == ')') {
            result += sign * operand;
            result *= stack.pop();  // sign
            result += stack.pop();  // operand
            operand = 0;
        }
    }

    // + sign * operand at '+', '-', ')' or end of s
    return result + sign * operand;
}
{% endhighlight %}

[132-pattern]: https://leetcode.com/problems/132-pattern/
[basic-calculator]: https://leetcode.com/problems/basic-calculator/
[count-submatrices-with-all-ones]: https://leetcode.com/problems/count-submatrices-with-all-ones/
[create-maximum-number]: https://leetcode.com/problems/create-maximum-number/
[final-prices-with-a-special-discount-in-a-shop]: https://leetcode.com/problems/final-prices-with-a-special-discount-in-a-shop/
[find-the-most-competitive-subsequence]: https://leetcode.com/problems/find-the-most-competitive-subsequence/
[flatten-nested-list-iterator]: https://leetcode.com/problems/flatten-nested-list-iterator/
[jump-game-v]: https://leetcode.com/problems/jump-game-v/
[largest-rectangle-in-histogram]: https://leetcode.com/problems/largest-rectangle-in-histogram/
[longest-valid-parentheses]: https://leetcode.com/problems/longest-valid-parentheses/
[maximal-rectangle]: https://leetcode.com/problems/maximal-rectangle/
[maximum-nesting-depth-of-two-valid-parentheses-strings]: https://leetcode.com/problems/maximum-nesting-depth-of-two-valid-parentheses-strings/
[maximum-width-ramp]: https://leetcode.com/problems/maximum-width-ramp/
[minimum-add-to-make-parentheses-valid]: https://leetcode.com/problems/minimum-add-to-make-parentheses-valid/
[minimum-cost-tree-from-leaf-values]: https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/
[minimum-insertions-to-balance-a-parentheses-string]: https://leetcode.com/problems/minimum-insertions-to-balance-a-parentheses-string/
[next-greater-element-ii]: https://leetcode.com/problems/next-greater-element-ii/
[next-greater-node-in-linked-list]: https://leetcode.com/problems/next-greater-node-in-linked-list/
[number-of-valid-subarrays]: https://leetcode.com/problems/number-of-valid-subarrays/
[number-of-visible-people-in-a-queue]: https://leetcode.com/problems/number-of-visible-people-in-a-queue/
[online-stock-span]: https://leetcode.com/problems/online-stock-span/
[remove-duplicate-letters]: https://leetcode.com/problems/remove-duplicate-letters/
[remove-outermost-parentheses]: https://leetcode.com/problems/remove-outermost-parentheses/
[reverse-substrings-between-each-pair-of-parentheses]: https://leetcode.com/problems/reverse-substrings-between-each-pair-of-parentheses/
[score-of-parentheses]: https://leetcode.com/problems/score-of-parentheses/
[sum-of-subarray-minimums]: https://leetcode.com/problems/sum-of-subarray-minimums/
[ternary-expression-parser]: https://leetcode.com/problems/ternary-expression-parser/
[remove-k-digits]: https://leetcode.com/problems/remove-k-digits/
