---
layout: post
title:  "Stack"
tags: stack
---
## Push/Pop Array Index
[Final Prices With a Special Discount in a Shop][final-prices-with-a-special-discount-in-a-shop]

{% highlight java %}
public int[] finalPrices(int[] prices) {
    int[] result = Arrays.copyOf(prices, prices.length);
    Stack<Integer> st = new Stack<>();
    for (int i = 0; i < result.length; i++) {
        while (!st.isEmpty() && result[st.peek()] >= result[i]) {
            result[st.pop()] -= result[i];
        }
        st.push(i);
    }
    return result;
}
{% endhighlight %}

[Next Greater Element II][next-greater-element-ii]

[Next Greater Node in Linked List][next-greater-node-in-linked-list]

[Largest Rectangle in Histogram][largest-rectangle-in-histogram]

{% highlight java %}
public int largestRectangleArea(int[] heights) {
    // index of non descending heights
    Deque<Integer> st = new ArrayDeque<>();
    int area = 0;
    for (int i = 0; i <= heights.length; i++) {            
        int height = (i == heights.length ? 0 : heights[i]);
        while(!st.isEmpty() && height < heights[st.peek()]) {
            int h = heights[st.pop()];
            int w = st.isEmpty() ? i : (i - 1) - st.peek();
            area = Math.max(area, h * w);
        }
        st.push(i);
    }
    return area;
}
{% endhighlight %}

```
[2,1,5,6,2,3]
i = 0	[0]				area = 0
i = 1	[]		h * w = 2	area = 2
i = 1	[1]				area = 2
i = 2	[2,1]				area = 2
i = 3	[3,2,1]				area = 2
i = 4	[2,1]		h * w = 6	area = 6
i = 4	[1]		h * w = 10	area = 10
i = 4	[4,1]				area = 10
i = 5	[5,4,1]				area = 10
i = 6	[4,1]		h * w = 3	area = 10
i = 6	[1]		h * w = 8	area = 10
i = 6	[]		h * w = 6	area = 10
i = 6	[6]				area = 10
```

[Reverse Substrings Between Each Pair of Parentheses][reverse-substrings-between-each-pair-of-parentheses]

{% highlight java %}
public String reverseParentheses(String s) {
    Deque<Integer> st = new ArrayDeque<>();
    int[] pairs = new int[s.length()];
    for (int i = 0; i < s.length(); ++i) {
        if (s.charAt(i) == '(')
            st.push(i);
        if (s.charAt(i) == ')') {
            int j = st.pop();
            pairs[i] = j;
            pairs[j] = i;
        }
    }

    StringBuilder sb = new StringBuilder();
    for (int i = 0, d = 1; i < s.length(); i += d) {
        if (s.charAt(i) == '(' || s.charAt(i) == ')') {
            i = pairs[i];
            d = -d;  // changes direction
        } else {
            sb.append(s.charAt(i));
        }
    }

    return sb.toString();
}
{% endhighlight %}

## Reduced to Counter
[Remove Outermost Parentheses][remove-outermost-parentheses]

{% highlight java %}
public string removeouterparentheses(string s) {
    stringbuilder sb = new stringbuilder();
    int open = 0;
    for (char c : s.tochararray()) {
        if ((c == '(' && open++ > 0) || (c == ')' && --open > 0)) {
            sb.append(c);
        }
    }
    return sb.tostring();
}
{% endhighlight %}

[Minimum Add to Make Parentheses Valid][minimum-add-to-make-parentheses-valid]

{% highlight java %}
public int minAddToMakeValid(String S) {
    int notOpened = 0;  // '(' needed to make the String balanced
    int notClosed = 0;  // ')' needed to make the String balanced
    for (char c : S.toCharArray()) {
        if (c == '(') {
            notClosed++;
        } else if (notClosed == 0) {
            notOpened++;
        } else {
            notClosed--;
        }
    }

    return notOpened + notClosed;
}
{% endhighlight %}

[Minimum Insertions to Balance a Parentheses String][minimum-insertions-to-balance-a-parentheses-string]

{% highlight java %}
public int minInsertions(String s) {
    int count = 0;
    int notClosed = 0;  // ')' needed to make the String balanced
    for (char c : s.toCharArray()) {
        if (c == '(') {
            if (notClosed % 2 > 0) {
                notClosed--;
                count++;
            }
            notClosed += 2;
        } else {
            notClosed--;
            if (notClosed < 0) {
                notClosed += 2;
                count++;
            }
        }
    }

    return count + notClosed;
}
{% endhighlight %}

[Maximum Nesting Depth of Two Valid Parentheses Strings][maximum-nesting-depth-of-two-valid-parentheses-strings]

{% highlight java %}
public int[] maxDepthAfterSplit(String seq) {
    int[] result = new int[seq.length()];
    int opened = 0;
    for (int i = 0; i < seq.length(); i++) {
        if (seq.charAt(i) == '(') {
            opened++;
        }

        result[i] = opened % 2;  // split by parity

        if (seq.charAt(i) == ')') {
            opened--;
        }
    }

    return result;
}
{% endhighlight %}

[final-prices-with-a-special-discount-in-a-shop]: https://leetcode.com/problems/final-prices-with-a-special-discount-in-a-shop/
[largest-rectangle-in-histogram]: https://leetcode.com/problems/largest-rectangle-in-histogram/
[maximum-nesting-depth-of-two-valid-parentheses-strings]: https://leetcode.com/problems/maximum-nesting-depth-of-two-valid-parentheses-strings/
[minimum-add-to-make-parentheses-valid]: https://leetcode.com/problems/minimum-add-to-make-parentheses-valid/
[minimum-insertions-to-balance-a-parentheses-string]: https://leetcode.com/problems/minimum-insertions-to-balance-a-parentheses-string/
[next-greater-element-ii]: https://leetcode.com/problems/next-greater-element-ii/
[next-greater-node-in-linked-list]: https://leetcode.com/problems/next-greater-node-in-linked-list/
[remove-outermost-parentheses]: https://leetcode.com/problems/remove-outermost-parentheses/
[reverse-substrings-between-each-pair-of-parentheses]: https://leetcode.com/problems/reverse-substrings-between-each-pair-of-parentheses/
