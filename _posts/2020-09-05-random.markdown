---
layout: post
title:  "Random"
tag: random
usemathjax: true
---
## Shuffle

[Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)

[Shuffle an Array][shuffle-an-array]

{% highlight java %}
private int[] arr;
private int[] oldArr;

private Random rand = new Random();

public Solution(int[] nums) {
    arr = nums;
    oldArr = nums.clone();
}

/** Resets the array to its original configuration and return it. */
public int[] reset() {
    return oldArr;
}

/** Returns a random shuffling of the array. */
public int[] shuffle() {
    for (int i = 0; i < arr.length; i++) {
        swap(i, i + rand.nextInt(arr.length - i));
    }
    return arr;
}

private void swap(int i, int j) {
    int tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
}
{% endhighlight %}

[Random Flip Matrix][random-flip-matrix]

{% highlight java %}
private Map<Integer, Integer> map;  // index : real index
private Random rand;
private int rows, cols, count;

public Solution(int n_rows, int n_cols) {
    map = new HashMap<>();
    rand = new Random();
    rows = n_rows;
    cols = n_cols;
    reset();
}

public int[] flip() {
    int index = rand.nextInt(count--);

    // swaps the real index at index and count
    int tmp = map.getOrDefault(index, index);        
    map.put(index, map.getOrDefault(count, count));
    map.put(count, tmp);

    return new int[]{tmp / cols, tmp % cols};
}

public void reset() {
    // no need to clear the map
    count = rows * cols;
}
{% endhighlight %}

## Remapping

[Insert Delete GetRandom O(1)][insert-delete-getrandom-o1]

Map + List

[Random Pick with Blacklist][random-pick-with-blacklist]

{% highlight java %}
private Map<Integer,Integer> map;
private Random rand;
private int size;  // whitelist size

public Solution(int N, int[] blacklist) {
    map = new HashMap<>();
    rand = new Random();
    size = N - blacklist.length;

    for (int b : blacklist) {
        if (b >= size) {
            map.put(b, -1);
        }  
    }

    // re-maps blacklist to [size, N)
    int count = N - 1;
    for (int b : blacklist){
        if (b < size) {
            while (map.containsKey(count)) {
                count--;
            }
            map.put(b, count--);
        }
    }
}

public int pick() {        
    int num = rand.nextInt(size);
    return map.getOrDefault(num, num);
}
{% endhighlight %}

## Cumulative Probability

[Random Pick with Weight][random-pick-with-weight]

{% highlight java %}
private int[] p;  // prefix sum
private Random rand;

public Solution(int[] w) {
    p = new int[w.length];
    p[0] = w[0];
    for (int i = 1; i < p.length; i++) {
        p[i] = p[i - 1] + w[i];
    }

    rand = new Random();
}

public int pickIndex() {
    int index = Arrays.binarySearch(p, rand.nextInt(p[p.length - 1]) + 1);
    return index < 0 ? ~index : index;
}
{% endhighlight %}

[Random Point in Non-overlapping Rectangles][random-point-in-non-overlapping-rectangles]

{% highlight java %}
private int[][] rects;
private int[] p;
private Random rand;

public Solution(int[][] rects) {
    this.rects = rects;
    p = new int[rects.length];
    // number of points
    p[0] = (rects[0][2] - rects[0][0] + 1) * (rects[0][3] - rects[0][1] + 1);

    for (int i = 1; i < rects.length; i++) {
        int[] rect = rects[i];
        p[i] = p[i - 1] + (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1);
    }

    rand = new Random();
}

public int[] pick() {
    int points = rand.nextInt(p[p.length - 1]) + 1;
    int i = Arrays.binarySearch(p, points);
    int index = i < 0 ? ~i : i;

    int[] rect = rects[index];
    int left = rect[0], bottom = rect[1], right = rect[2], top = rect[3];
    int x = left + (p[index] - points) % (right - left + 1);
    int y = bottom + (p[index] - points) / (right - left + 1);
    return new int[]{x, y};
}
{% endhighlight %}

# Sampling
## Rejection Sampling

[Rejection sampling](https://en.wikipedia.org/wiki/Rejection_sampling): acceptance-rejection method

The algorithm to obtain a sample from distribution $$ X $$ with density $$ f $$ using samples from distribution $$ Y $$ with density $$ g $$ is as follows:

* Obtain a sample $$ y $$ from distribution $$ Y $$ and a sample $$ u $$ from $$ \mathrm {Unif} (0,1) $$ (the uniform distribution over the unit interval).
* Check whether or not $$ u<f(y)/Mg(y) $$.
  * If this holds, accept $$ y $$ as a sample drawn from $$ f $$;
  * if not, reject the value of $$ y $$ and return to the sampling step.

The algorithm will take an average of $$ M $$ iterations to obtain a sample.

![Rejction Sampling](https://theclevermachine.files.wordpress.com/2012/09/rejectionsamplingcriterion.png?w=584)

(from https://theclevermachine.files.wordpress.com/2012/09/rejectionsamplingcriterion.png?w=584)

[Implement Rand10() Using Rand7()][implement-rand10-using-rand7]

![rand7 to rand10](https://leetcode.com/problems/implement-rand10-using-rand7/Figures/470/rejectionSamplingTable.png)

(from https://leetcode.com/problems/implement-rand10-using-rand7/Figures/470/rejectionSamplingTable.png)

{% highlight java %}
public int rand10() {
    int row, col, index;
    do {
        row = rand7();
        col = rand7();
        index = col + (row - 1) * 7;
    } while (index > 40);
    return 1 + index % 10;
}
{% endhighlight %}

[Generate Random Point in a Circle][generate-random-point-in-a-circle]

![Random point in a circle](/assets/generate_random_point_in_a_circle_rejection_sampling.png)

{% highlight java %}
private double r, x, y;

public Solution(double radius, double x_center, double y_center) {
    this.r = radius;
    this.x = x_center;
    this.y = y_center;
}

public double[] randPoint() {
    double x0 = x - r;
    double y0 = y - r;

    while (true) {
        double xr = x0 + Math.random() * r * 2;
        double yr = y0 + Math.random() * r * 2;
        if ((xr - x) * (xr - x) + (yr - y) * (yr - y) <= r * r) {
            return new double[]{xr, yr};
        }
    }
}
{% endhighlight %}

## Inverse Transform Sampling

[Inverse transform sampling](https://en.wikipedia.org/wiki/Inverse_transform_sampling)

1. Generate a random number $$ u $$ from the standard uniform distribution in the interval $$ [0,1] $$, e.g. from $$ U\sim \mathrm {Unif} [0,1] $$
1. Find the inverse of the desired CDF, e.g. $$ F_{X}^{-1}(x) $$
1. Compute $$ X=F_{X}^{-1}(u) $$. The computed random variable $$ X $$ has distribution $$ F_X(x) $$

[Generate Random Point in a Circle][generate-random-point-in-a-circle]

{% highlight java %}
private double r, x, y;

public Solution(double radius, double x_center, double y_center) {
    this.r = radius;
    this.x = x_center;
    this.y = y_center;
}

public double[] randPoint() {
    // PDF: f(x) = 2 * r, R = 1
    // CDF: F(x) = r ^ 2
    // F' = sqrt(r)
    double d = r * Math.sqrt(Math.random());
    double theta = 2 * Math.random() * Math.PI;

    return new double[]{x + d * Math.cos(theta), y + d * Math.sin(theta)};
}
{% endhighlight %}

## Reservoir Sampling

[Reservoir sampling](https://en.wikipedia.org/wiki/Reservoir_sampling)

Choosing a simple random sample, without replacement, of `k` items from a population of *unknown* size `n` in a single pass over the items.

Algorithm R:

{% highlight java %}
/**
 * Reservoir sampling with Algorithm R.
 * @param nums input array
 * @param k reservoir size
 * @return output reservoir array with randomly chosen items
 */
public int[] reservoirSample(int[] nums, int k) {
    // fills the reservoir array
    for (int i = 0; i < k; i++) {
        r[i] = nums[i];
    }

    // replaces elements with gradually decreasing probability
    for (int i = k; i < nums.length; i++) {
        int j = rand.nextInt(i + 1);
        if (j < k) {
            r[j] = nums[i];
        }
    }
}
{% endhighlight %}

[Random Pick Index][random-pick-index]

{% highlight java %}
private int[] nums;
private Random rand;

public Solution(int[] nums) {
    this.nums = nums;
    this.rand = new Random();
}

public int pick(int target) {
    int index = -1, count = 0;
    // reservoir size == 1
    for (int i = 0; i < nums.length; i++) {
        if (nums[i] == target && rand.nextInt(++count) == 0) {
            index = i;
        }     
    }

    return index;
}
{% endhighlight %}

[Linked List Random Node][linked-list-random-node]

[implement-rand10-using-rand7]: https://leetcode.com/problems/implement-rand10-using-rand7/
[insert-delete-getrandom-o1]: https://leetcode.com/problems/insert-delete-getrandom-o1/
[generate-random-point-in-a-circle]: https://leetcode.com/problems/generate-random-point-in-a-circle/
[linked-list-random-node]: https://leetcode.com/problems/linked-list-random-node/
[random-flip-matrix]: https://leetcode.com/problems/random-flip-matrix/
[random-pick-index]: https://leetcode.com/problems/random-pick-index/
[random-pick-with-weight]: https://leetcode.com/problems/random-pick-with-weight/
[random-pick-with-blacklist]: https://leetcode.com/problems/random-pick-with-blacklist/
[random-point-in-non-overlapping-rectangles]: https://leetcode.com/problems/random-point-in-non-overlapping-rectangles/
[shuffle-an-array]: https://leetcode.com/problems/shuffle-an-array/
