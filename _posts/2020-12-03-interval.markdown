---
layout: post
title:  "Interval"
---

[Video Stitching][video-stitching]

{% highlight java %}
public int videoStitching(int[][] clips, int T) {
    Arrays.sort(clips, (a, b) -> a[0] - b[0]);

    int i = 0, start = 0, end = 0, result = 0;
    while (start < T) {
        while (i < clips.length && clips[i][0] <= start) {
            end = Math.max(end, clips[i++][1]);
        }

        if (start == end) {
            return -1;
        }

        start = end;
        result++;
    }

    return result;
}
{% endhighlight %}

# Greedy

## Interval Scheduling

### Interval Scheduling Maximization Problem (ISMP)

[ISMP](https://en.wikipedia.org/wiki/Interval_scheduling#Interval_Scheduling_Maximization): to find a largest compatible set - a set of non-overlapping intervals of maximum size. The goal here is to execute as many tasks as possible.

[Non-overlapping Intervals][non-overlapping-intervals]

{% highlight java %}
public int eraseOverlapIntervals(int[][] intervals) {
    if (intervals.length == 0) {
        return 0;
    }

    Arrays.sort(intervals, (a, b) -> Integer.compare(a[1], b[1]));

    int end = intervals[0][1], count = 1;
    for (int[] i : intervals) {
        if (i[0] >= end) {
            end = i[1];
            count++;
        }
    }
    return intervals.length - count;
}
{% endhighlight %}

[Merge Intervals][merge-intervals]

{% highlight java %}
public int[][] merge(int[][] intervals) {
    Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));

    List<int[]> list = new ArrayList<>();
    for (int[] i : intervals) {
        if (list.isEmpty() || list.get(list.size() - 1)[1] < i[0]) {
            list.add(i);
        } else {
            list.get(list.size() - 1)[1] = Math.max(list.get(list.size() - 1)[1], i[1]);
        }
    }

    return list.toArray(new int[list.size()][]);
}
{% endhighlight %}

[Minimum Number of Arrows to Burst Balloons][minimum-number-of-arrows-to-burst-balloons]

{% highlight java %}
public int findMinArrowShots(int[][] points) {
    if (points.length == 0) {
        return 0;
    }

    // sorts points by end coordinate
    Arrays.sort(points, (a, b) -> Integer.compare(a[1], b[1]));

    int arrow = points[0][1], count = 1;
    for (int[] point : points) {
        if (arrow < point[0]) {
            count++;
            arrow = point[1];
        }
    }
    return count;
}
{% endhighlight %}

[Meeting Rooms II][meeting-rooms-ii]

{% highlight java %}
public int minMeetingRooms(int[][] intervals) {
    // sorts invervals by start time
    Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));

    // stores the end time of current open meetings
    Queue<Integer> pq = new PriorityQueue<>();
    for (int[] interval : intervals) {
        // frees up old room for the new meeting to occupy
        if (!pq.isEmpty() && interval[0] >= pq.peek()) {
            pq.poll();
        }

        // occupies the old room or a new room
        pq.offer(interval[1]);
    }

    // queue size is monotonically increasing
    return pq.size();
}
{% endhighlight %}

[Maximum Number of Events That Can Be Attended][maximum-number-of-events-that-can-be-attended]

{% highlight java %}
public int maxEvents(int[][] events) {
    // sorts events by start day
    Arrays.sort(events, (a, b) -> Integer.compare(a[0], b[0]));

    // stores the end day of the current open events
    Queue<Integer> pq = new PriorityQueue<>();
    int i = 0, count = 0, day = 0;
    while (!pq.isEmpty() || i < events.length) {
        // if no events are open on this day,
        // flies time to the start day of the next open event
        if (pq.isEmpty()) {
            day = events[i][0];
        }

        // adds new events that can be attended on this day
        while (i < events.length && events[i][0] <= day) {
            pq.offer(events[i++][1]);
        }

        // attends the event that will end the earliest
        pq.poll();
        count++;
        day++;

        // removes closed events
        while (!pq.isEmpty() && pq.peek() < day) {
            pq.poll();
        }   
    }

    return count;
}
{% endhighlight %}

[Maximum Number of Eaten Apples][maximum-number-of-eaten-apples]

{% highlight java %}
public int eatenApples(int[] apples, int[] days) {        
    // apple, end day
    Queue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[1]));  
    int count = 0;
    for (int i = 0; i < apples.length || !pq.isEmpty(); i++) {
        // adds apples grown on the i-th day in a bag
        if (i < apples.length) {
            pq.offer(new int[]{apples[i], i + days[i]});
        }

        // removes rotten apples
        while (!pq.isEmpty() && pq.peek()[1] <= i) {
            pq.poll();
        }

        // gets the earliest available apple
        if (!pq.isEmpty()) {
            count++;
            // removes if no apples left in the bag
            if (--pq.peek()[0] == 0) {
                pq.poll();
            }
        }
    }
    return count;
}
{% endhighlight %}

[Course Schedule III][course-schedule-iii]

{% highlight java %}
public int scheduleCourse(int[][] courses) {
    // sorts by deadlines (greedy)
    Arrays.sort(courses, (a, b) -> a[1] - b[1]);

    // duration
    // once a course fits in, it can be removed any time later;
    // and the other courses that have been added into the heap would still fit
    Queue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);

    int time = 0;
    for (int[] c : courses) {
        // adds current course
        time += c[0];
        pq.offer(c[0]);

        // if time exceeds, removes the heap top
        if (time > c[1]) {
            time -= pq.poll();
        }
    }

    return pq.size();
}
{% endhighlight %}

[Maximum Distance in Arrays][maximum-distance-in-arrays]

{% highlight java %}
public int maxDistance(List<List<Integer>> arrays) {
    int distance = 0, max = arrays.get(0).get(arrays.get(0).size() - 1), min = arrays.get(0).get(0);

    for (int i = 1; i < arrays.size(); i++) {
        distance = Math.max(Math.max(distance, Math.abs(arrays.get(i).get(0) - max)), Math.abs(arrays.get(i).get(arrays.get(i).size() - 1) - min));
        max = Math.max(max, arrays.get(i).get(arrays.get(i).size() - 1));
        min = Math.min(min, arrays.get(i).get(0));
    }

    return distance;
}
{% endhighlight %}

# Dynamic Programming

[Video Stitching][video-stitching]

{% highlight java %}
private int MAX_LENGTH = 100;

public int videoStitching(int[][] clips, int T) {
    Arrays.sort(clips, (a, b) -> a[0] - b[0]);

    int[] dp = new int[MAX_LENGTH + 1];
    Arrays.fill(dp, MAX_LENGTH + 1);
    dp[0] = 0;

    for (int[] c : clips) {
        for (int i = c[0] + 1; i <= c[1]; i++) {
            dp[i] = Math.min(dp[i], dp[c[0]] + 1);
        }
    }

    return dp[T] == MAX_LENGTH + 1 ? -1 : dp[T];
}
{% endhighlight %}

{% highlight java %}
public int videoStitching(int[][] clips, int T) {
    int[] dp = new int[T + 1];
    Arrays.fill(dp, T + 1);
    dp[0] = 0;

    // If dp[i - 1] >= T, we need at least T clips to cover the time (i - 1)
    // then to cover time i, we need at least T + 1 clips
    // The minimum length of each clip is 1, so it contradicts pigeonhole principle
    for (int i = 1; i <= T && dp[i - 1] < T; i++) {
        for (int[] c : clips) {
            if (c[0] <= i && i <= c[1]) {
                dp[i] = Math.min(dp[i], dp[c[0]] + 1);
            }
        }
    }

    return dp[T] == T + 1 ? -1 : dp[T];
}
{% endhighlight %}

# BFS

[Video Stitching][video-stitching]

{% highlight java %}
public int videoStitching(int[][] clips, int T) {
    int[] nums = new int[T + 1];
    for (int[] clip : clips) {
        if (clip[0] <= T) {
            nums[clip[0]] = Math.max(nums[clip[0]], clip[1] - clip[0]);
        }
    }
    return jump(nums);
}

// 45. Jump Game II
private int jump(int[] nums) {
}
{% endhighlight %}

# Intersection

[Meeting Scheduler][meeting-scheduler]

{% highlight java %}
public List<Integer> minAvailableDuration(int[][] slots1, int[][] slots2, int duration) {
    Arrays.sort(slots1, (a, b) -> a[0] - b[0]);
    Arrays.sort(slots2, (a, b) -> a[0] - b[0]);

    int i = 0, j = 0;
    while (i < slots1.length && j < slots2.length) {
        // finds the boundaries of the intersection
        int left = Math.max(slots1[i][0], slots2[j][0]);
        int right = Math.min(slots1[i][1], slots2[j][1]);

        if (right - left >= duration) {
            return Arrays.asList(left, left + duration);
        }

        // always moves the one that ends earlier
        if (slots1[i][1] < slots2[j][1]) {
            i++;
        } else {
            j++;
        }
    }
    return Collections.EMPTY_LIST;
}
{% endhighlight %}

# Data Structure

[Exam Room][exam-room]

PriorityQueue:

{% highlight java %}
// {start, end, priority, isValid}
// isValid is for lazy deletion
Queue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> -a[2]));

// start: interval
// end: interval
Map<Integer, int[]> startMap, endMap;
{% endhighlight %}

TreeMap (no lazy deletion):

{% highlight java %}
private TreeSet<Interval> intervals = new TreeSet<>();
// start: end
// end: start
private Map<Integer, Integer> ends = new HashMap<>(), starts = new HashMap<>();
private int n;

public ExamRoom(int N) {
    this.n = N;

    intervals.add(new Interval(0, N - 1, n));
    ends.put(0, N - 1);
    starts.put(N - 1, 0);
}

// O(log(n))
public int seat() {
    Interval i = intervals.pollLast();

    int seat = i.getSeat();
    intervals.add(new Interval(i.start, seat - 1, n));
    intervals.add(new Interval(seat + 1, i.end, n));

    ends.put(i.start, seat - 1);
    starts.put(seat - 1, i.start);

    ends.put(seat + 1, i.end);
    starts.put(i.end, seat + 1);

    return seat;
}

// O(log(n))
public void leave(int p) {
    // gets the start of the interval on p's left
    // gets the end of the interval on p's right
    int start = starts.get(p - 1), end = ends.get(p + 1);

    // merges p's adjacent intervals
    intervals.remove(new Interval(start, p - 1, n));
    intervals.remove(new Interval(p + 1, end, n));
    intervals.add(new Interval(start, end, n));

    ends.put(start, end);
    starts.put(end, start);

    starts.remove(p - 1);
    ends.remove(p + 1);
}

class Interval implements Comparable<Interval> {
    int n;
    int start, end;

    Interval(int start, int end, int n) {
        this.start = start;
        this.end = end;
        this.n = n;
    }

    // takes distance as priority
    int getPriority() {
        // edge case: left end
        if (start == 0) {
            return end;
        }

        // edge case: right end
        if (end == n - 1) {
            return n - 1 - start;
        }

        // if interval size is 0,
        // assigns lowest priority to it
        if (end < start) {
            return -1;
        }

        return (end - start) / 2;
    }

    int getSeat() {
        if (start == 0) {
            return 0;
        }

        if (end == n - 1) {
            return n - 1;
        }

        return (start + end) >>> 1;
    }

    @Override
    public int compareTo(Interval i) {
        int p1 = getPriority(), p2 = i.getPriority();
        // if priorities are equal, pick the lowest number
        return p1 == p2 ? i.start - start : p1 - p2;
    }

    @Override
    public boolean equals(Object o) {
        if (o == this) {
            return true;
        }

        if (!(o instanceof Interval)) {
            return false;
        }

        Interval interval = (Interval) o;
        return start == interval.start &&
                Objects.equals(end, interval.end) &&
                Objects.equals(n, interval.n);
    }

    @Override
    public int hashCode() {
        return Objects.hash(start, end, n);
    }
}
{% endhighlight %}

[course-schedule-iii]: https://leetcode.com/problems/course-schedule-iii/
[exam-room]: https://leetcode.com/problems/exam-room/
[maximum-distance-in-arrays]: https://leetcode.com/problems/maximum-distance-in-arrays/
[maximum-number-of-eaten-apples]: https://leetcode.com/problems/maximum-number-of-eaten-apples/
[maximum-number-of-events-that-can-be-attended]: https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended/
[meeting-rooms-ii]: https://leetcode.com/problems/meeting-rooms-ii/
[meeting-scheduler]: https://leetcode.com/problems/meeting-scheduler/
[merge-intervals]: https://leetcode.com/problems/merge-intervals/
[minimum-number-of-arrows-to-burst-balloons]: https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/
[non-overlapping-intervals]: https://leetcode.com/problems/non-overlapping-intervals/
[video-stitching]: https://leetcode.com/problems/video-stitching/
