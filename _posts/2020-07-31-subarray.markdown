---
layout: post
title:  "Subarray"
tags: array
---
# Definition
```
a[i], a[i + 1], ..., a[j]
```
Where `0 <= i <= j <= a.length`

# Algorithm

## Prefix Sum

[Subarray Sum Equals K][subarray-sum-equals-k]

{% highlight java %}
public int subarraySum(int[] nums, int k) {
    Map<Integer, Integer> map = new HashMap<>();  // prefix sum : count
    map.put(0, 1);  // p[0]

    int sum = 0, count = 0;
    for (int num : nums) {
        // calculates p[i]
        sum += num;

        // p[i] - k exists in the map
        if (map.containsKey(sum - k)) {
            count += map.get(sum - k);
        }

        // increments counter of p[i]
        map.put(sum, map.getOrDefault(sum, 0) + 1);
    }

    return count;
}
{% endhighlight %}

[Maximum Size Subarray Sum Equals k][maximum-size-subarray-sum-equals-k]

{% highlight java %}
public int maxSubArrayLen(int[] nums, int k) {
    Map<Integer, Integer> map = new HashMap<>();
    map.put(0, -1);

    int max = 0, sum = 0;;
    for (int i = 0; i < nums.length; i++) {
        sum += nums[i];
        if (map.containsKey(sum - k)) {
            max = Math.max(max, i - map.get(sum - k));
        }

        // stores the index of the first occurrence of sum
        map.putIfAbsent(sum, i);
    }
    return max;
}
{% endhighlight %}

[Contiguous Array][contiguous-array]

{% highlight java %}
public int findMaxLength(int[] nums) {
    Map<Integer, Integer> map = new HashMap<>();
    map.put(0, -1);

    // count(ones) - count(zeros)
    int diff = 0, max = 0;
    for (int i = 0; i < nums.length; i++) {
        diff += nums[i] == 0 ? -1 : 1;
        if (map.containsKey(diff)) {
            max = Math.max(max, i - map.get(diff));
        } else {
            map.put(diff, i);
        }
    }
    return max;
}
{% endhighlight %}

[Count Triplets That Can Form Two Arrays of Equal XOR][count-triplets-that-can-form-two-arrays-of-equal-xor]

[Product of the Last K Numbers][product-of-the-last-k-numbers]

{% highlight java %}
private List<Integer> p;

public ProductOfNumbers() {
    p = new ArrayList<>();
    p.add(1);
}

public void add(int num) {
    if (num > 0) {
        p.add(p.get(p.size() - 1) * num);
    } else {
        p = new ArrayList();
        p.add(1);
    }
}

public int getProduct(int k) {
    int n = p.size();
    return k < n ? p.get(n - 1) / p.get(n - k - 1) : 0;
}
{% endhighlight %}

### Pre-computed

[Shortest Distance to Target Color][shortest-distance-to-target-color]

## Discrete Time

[Discrete Time](https://en.wikipedia.org/wiki/Discrete_time_and_continuous_time#Discrete_time) Signal Processing

[Range Addition][range-addition]

{% highlight java %}
public int[] getModifiedArray(int length, int[][] updates) {
    int[] result = new int[length];
    // finds pulses
    for (int[] u : updates) {
        result[u[0]] += u[2];
        if (u[1] + 1 < length) {
            result[u[1] + 1] -= u[2];
        }
    }

    // accumulates pulses
    for(int i = 1; i < length; i++) {
        result[i] += result[i - 1];
    }

    return result;
}
{% endhighlight %}

[Minimum Moves to Make Array Complementary][minimum-moves-to-make-array-complementary]

{% highlight java %}
public int minMoves(int[] nums, int limit) {
    // delta array
    // let target T = nums[i] + nums[n - 1 - i]
    // changing T from (i - 1) to i takes p[i] more operations
    // 2 <= T <= 2 * limit
    int[] p = new int[2 * limit + 2];

    //       2          1     0      1             2
    // |----------|-----------|------------|----------------|
    // 2   min(a, b) + 1    a + b   max(a, b) + limit   2 * limit
    //
    int n = nums.length;
    for (int i = 0; i < n / 2; i++) {
        int a = nums[i], b = nums[n - 1 - i];
        p[2] += 2;  // [2, min(a,b)]
        p[Math.min(a, b) + 1]--;  // (min(a, b), a + b)
        p[a + b]--;
        p[a + b + 1]++;  // (a + b, max(a, b) + limit]
        p[Math.max(a, b) + limit + 1]++;  // (max(a, b) + limit, 2 * limit]
    }

    int move = 2 * n, sum = 0;
    for (int i = 2; i <= 2 * limit; i++) {
        sum += p[i];
        move = Math.min(move, sum);
    }
    return move;
}
{% endhighlight %}

## Sliding Window

[Maximum Number of Occurrences of a Substring][maximum-number-of-occurrences-of-a-substring]

If a substring occurs `n` times, any of its substring occurs at least `n` times. So a substring with length `minSize` will have the max occurrences.

[Shortest Unsorted Continuous Subarray][shortest-unsorted-continuous-subarray]

{% highlight java %}
public int findUnsortedSubarray(int[] nums) {
    int n = nums.length, start = -1, end = -2, min = nums[n - 1], max = nums[0];
    for (int i = 1; i < n; i++) {
        max = Math.max(max, nums[i]);
        min = Math.min(min, nums[n - 1 - i]);
        if (nums[i] < max) {
            end = i;
        }
        if (nums[n - 1 - i] > min) {
            start = n - 1 - i;
        }
    }
    return end - start + 1;
}
{% endhighlight %}

## Dynamic Programming

[Find Two Non-overlapping Sub-arrays Each With Target Sum][find-two-non-overlapping-sub-arrays-each-with-target-sum]

{% highlight java %}
private final int MAX = 100_001;

public int minSumOfLengths(int[] arr, int target) {
    // minimum length sum of subarrays with target sum
    int dp[] = new int[arr.length];

    // sliding window
    int i = 0, j = 0, sum = 0, result = MAX, min = MAX;
    while (j < arr.length) {
        sum += arr[j];
        while (sum > target) {
            sum -= arr[i++];
        }

        if (sum == target) {
            if (i > 0 && dp[i - 1] != 0) {
                result = Math.min(result, dp[i - 1] + j - i + 1);
            }
            min = Math.min(min, j - i + 1);
        }
        dp[j++] = min;
    }

    return result == MAX ? -1 : result;
}
{% endhighlight %}

Generalization: `N` non-overlapping subarrays

{% highlight java %}
{% endhighlight %}

[Arithmetic Slices][arithmetic-slices]

{% highlight java %}
public int numberOfArithmeticSlices(int[] A) {
    int[] dp = new int[A.length];
    int count = 0;
    for (int i = 2; i < dp.length; i++) {
        if (A[i] - A[i - 1] == A[i - 1] - A[i - 2]) {
            dp[i] = dp[i - 1] + 1;
            count += dp[i];
        }
    }
    return count;
}
{% endhighlight %}

Reduced to 0D:

{% highlight java %}
public int numberOfArithmeticSlices(int[] A) {
    int dp = 0, count = 0;
    for (int i = 2; i < A.length; i++) {
        if (A[i] - A[i - 1] == A[i - 1] - A[i - 2]) {
            dp++;
            count += dp;
        } else {
            dp = 0;
        }
    }
    return count;
}
{% endhighlight %}

[arithmetic-slices]: https://leetcode.com/problems/arithmetic-slices/
[contiguous-array]: https://leetcode.com/problems/contiguous-array/
[count-triplets-that-can-form-two-arrays-of-equal-xor]: https://leetcode.com/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/
[find-two-non-overlapping-sub-arrays-each-with-target-sum]: https://leetcode.com/problems/find-two-non-overlapping-sub-arrays-each-with-target-sum/
[maximum-number-of-occurrences-of-a-substring]: https://leetcode.com/problems/maximum-number-of-occurrences-of-a-substring/
[maximum-size-subarray-sum-equals-k]: https://leetcode.com/problems/maximum-size-subarray-sum-equals-k/
[minimum-moves-to-make-array-complementary]: https://leetcode.com/problems/minimum-moves-to-make-array-complementary/
[product-of-the-last-k-numbers]: https://leetcode.com/problems/product-of-the-last-k-numbers/
[range-addition]: https://leetcode.com/problems/range-addition/
[shortest-distance-to-target-color]: https://leetcode.com/problems/shortest-distance-to-target-color/
[shortest-unsorted-continuous-subarray]: https://leetcode.com/problems/shortest-unsorted-continuous-subarray/
[subarray-sum-equals-k]: https://leetcode.com/problems/subarray-sum-equals-k/
[subarrays-with-k-different-integers]: https://leetcode.com/problems/subarrays-with-k-different-integers/
