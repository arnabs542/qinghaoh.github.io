---
layout: post
title:  "Subarray"
tags: array
---
# Definition
```
a[i], a[i + 1], ..., a[j]
```
Where `0 <= i <= j <= a.length`

# Algorithm

## Prefix Sum

[Subarray Sum Equals K][subarray-sum-equals-k]

{% highlight java %}
public int subarraySum(int[] nums, int k) {
    int sum = 0, count = 0;
    Map<Integer, Integer> map = new HashMap<>();  // prefix sum : count
    for (int num : nums) {
        sum += num;
        if (sum == k) {
            count++;
        }

        if (map.containsKey(sum - k)) {
            count += map.get(sum - k);
        }

        map.put(sum, map.getOrDefault(sum, 0) + 1);
    }
    return count;
}
{% endhighlight %}

## Sliding Window

## Dynamic Programming

[Find Two Non-overlapping Sub-arrays Each With Target Sum][find-two-non-overlapping-sub-arrays-each-with-target-sum]

{% highlight java %}
private final int MAX = 100_001;

public int minSumOfLengths(int[] arr, int target) {
    // minimum length sum of subarrays with target sum
    int dp[] = new int[arr.length];

    // sliding window
    int sum = 0, start = 0, result = MAX, min = MAX;
    for (int i = 0; i < arr.length; i++) {
        sum += arr[i];
        while (sum > target){
            sum -= arr[start];
            start++;
        }

        if (sum == target) {
            if (start > 0 && dp[start - 1] != 0) {
                result = Math.min(result, dp[start - 1] + i - start + 1);
            }
            min = Math.min(min, i - start + 1);
        }
        dp[i] = min;
    }

    return result == MAX ? -1 : result;
}
{% endhighlight %}

Generalization: `N` non-overlapping subarrays

{% highlight java %}
{% endhighlight %}

[find-two-non-overlapping-sub-arrays-each-with-target-sum]: https://leetcode.com/problems/find-two-non-overlapping-sub-arrays-each-with-target-sum/
[subarray-sum-equals-k]: https://leetcode.com/problems/subarray-sum-equals-k/
[subarrays-with-k-different-integers]: https://leetcode.com/problems/subarrays-with-k-different-integers/
