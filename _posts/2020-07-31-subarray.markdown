---
layout: post
title:  "Subarray"
tags: array
---
# Definition
```
a[i], a[i + 1], ..., a[j]
```
Where `0 <= i <= j <= a.length`

# Algorithm

## Prefix Sum

[Subarray Sum Equals K][subarray-sum-equals-k]

{% highlight java %}
public int subarraySum(int[] nums, int k) {
    int sum = 0, count = 0;
    Map<Integer, Integer> map = new HashMap<>();  // prefix sum : count
    for (int num : nums) {
        sum += num;
        if (sum == k) {
            count++;
        }

        if (map.containsKey(sum - k)) {
            count += map.get(sum - k);
        }

        map.put(sum, map.getOrDefault(sum, 0) + 1);
    }
    return count;
}
{% endhighlight %}

## Sliding Window

[Maximum Number of Occurrences of a Substring][maximum-number-of-occurrences-of-a-substring]

If a substring occurs `n` times, any of its substring occurs at least `n` times. So a substring with length `minSize` will have the max occurrences.

## Dynamic Programming

[Find Two Non-overlapping Sub-arrays Each With Target Sum][find-two-non-overlapping-sub-arrays-each-with-target-sum]

{% highlight java %}
private final int MAX = 100_001;

public int minSumOfLengths(int[] arr, int target) {
    // minimum length sum of subarrays with target sum
    int dp[] = new int[arr.length];

    // sliding window
    int i = 0, j = 0, sum = 0, result = MAX, min = MAX;
    while (j < arr.length) {
        sum += arr[j];
        while (sum > target){
            sum -= arr[i++];
        }

        if (sum == target) {
            if (i > 0 && dp[i - 1] != 0) {
                result = Math.min(result, dp[i - 1] + j - i + 1);
            }
            min = Math.min(min, j - i + 1);
        }
        dp[j++] = min;
    }

    return result == MAX ? -1 : result;
}
{% endhighlight %}

Generalization: `N` non-overlapping subarrays

{% highlight java %}
{% endhighlight %}

[find-two-non-overlapping-sub-arrays-each-with-target-sum]: https://leetcode.com/problems/find-two-non-overlapping-sub-arrays-each-with-target-sum/
[maximum-number-of-occurrences-of-a-substring]: https://leetcode.com/problems/maximum-number-of-occurrences-of-a-substring/
[subarray-sum-equals-k]: https://leetcode.com/problems/subarray-sum-equals-k/
[subarrays-with-k-different-integers]: https://leetcode.com/problems/subarrays-with-k-different-integers/
