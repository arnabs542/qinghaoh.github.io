---
layout: post
title:  "SQL"
tag: sql
---
[Swap Salary][swap-salary]

{% highlight sql %}
UPDATE salary
SET
    sex = CASE sex
        WHEN 'm' THEN 'f'
        ELSE 'm'
    END;
{% endhighlight %}

{% highlight sql %}
UPDATE salary
SET sex = IF(sex='m', 'f', 'm');
{% endhighlight %}

{% highlight sql %}
UPDATE salary
SET sex = CHAR(ASCII('f') ^ ASCII('m') ^ ASCII(sex));
{% endhighlight %}

[Classes More Than 5 Students][classes-more-than-5-students]

{% highlight sql %}
SELECT
    class
FROM
    (SELECT
        class, COUNT(DISTINCT student) AS num
    FROM
        courses
    GROUP BY class) AS temp_table
WHERE
    num >= 5
;
{% endhighlight %}

[Rising Temprature][rising-temperature]

{% highlight sql %}
SELECT
    weather.id AS 'Id'
FROM
    weather
        JOIN
    weather w ON DATEDIFF(weather.recordDate, w.recordDate) = 1
        AND weather.Temperature > w.Temperature
;
{% endhighlight %}

[Second Highest Salary][second-highest-salary]

{% highlight sql %}
SELECT
    (SELECT DISTINCT
            Salary
        FROM
            Employee
        ORDER BY Salary DESC
        LIMIT 1 OFFSET 1) AS SecondHighestSalary
;
{% endhighlight %}

{% highlight sql %}
SELECT
    IFNULL(
      (SELECT DISTINCT Salary
       FROM Employee
       ORDER BY Salary DESC
        LIMIT 1 OFFSET 1),
    NULL) AS SecondHighestSalary
;
{% endhighlight %}

{% highlight sql %}
SELECT
    MAX(Salary) AS SecondHighestSalary
FROM
    Employee
WHERE
    Salary < (SELECT MAX(Salary) FROM Employee)
;
{% endhighlight %}

[Employees Earning More Than Their Managers][employees-earning-more-than-their-managers]

{% highlight sql %}
SELECT
     a.NAME AS Employee
FROM Employee AS a JOIN Employee AS b
     ON a.ManagerId = b.Id
     AND a.Salary > b.Salary
;
{% endhighlight %}

[Reformat Department Table][reformat-department-table]

{% highlight sql %}
SELECT id, 
	SUM(CASE WHEN month = 'Jan' THEN revenue ELSE null END) AS Jan_Revenue,
	SUM(CASE WHEN month = 'Feb' THEN revenue ELSE null END) AS Feb_Revenue,
	SUM(CASE WHEN month = 'Mar' THEN revenue ELSE null END) AS Mar_Revenue,
	SUM(CASE WHEN month = 'Apr' THEN revenue ELSE null END) AS Apr_Revenue,
	SUM(CASE WHEN month = 'May' THEN revenue ELSE null END) AS May_Revenue,
	SUM(CASE WHEN month = 'Jun' THEN revenue ELSE null END) AS Jun_Revenue,
	SUM(CASE WHEN month = 'Jul' THEN revenue ELSE null END) AS Jul_Revenue,
	SUM(CASE WHEN month = 'Aug' THEN revenue ELSE null END) AS Aug_Revenue,
	SUM(CASE WHEN month = 'Sep' THEN revenue ELSE null END) AS Sep_Revenue,
	SUM(CASE WHEN month = 'Oct' THEN revenue ELSE null END) AS Oct_Revenue,
	SUM(CASE WHEN month = 'Nov' THEN revenue ELSE null END) AS Nov_Revenue,
	SUM(CASE WHEN month = 'Dec' THEN revenue ELSE null END) AS Dec_Revenue
FROM department
GROUP BY id
ORDER BY id
;
{% endhighlight %}

[Game Play Analysis I][game-play-analysis-i]

{% highlight sql %}
SELECT player_id,
    MIN(event_date) AS first_login
FROM Activity
GROUP BY player_id
;
{% endhighlight %}

[Game Play Analysis II][game-play-analysis-ii]

{% highlight sql %}
SELECT player_id,
    device_id
FROM Activity
WHERE (player_id, event_date) IN
    (
        SELECT player_id,
        MIN(event_date)
        FROM Activity
        GROUP BY player_id
    )
;
{% endhighlight %}

[Game Play Analysis III][game-play-analysis-iii]

{% highlight sql %}
SELECT a1.player_id,
    a1.event_date,
    SUM(a2.games_played) AS games_played_so_far
FROM Activity a1
JOIN Activity a2
    ON a1.event_date >= a2.event_date
    AND a1.player_id = a2.player_id
GROUP BY a1.player_id, a1.event_date
;
{% endhighlight %}

MySQL uses three-valued logic -- RUE, FALSE and UNKNOWN. Anything compared to NULL evaluates to the third value: UNKNOWN. That “anything” includes NULL itself! That’s why MySQL provides the IS NULL and IS NOT NULL operators to specifically check for NULL.

[Customer Placing the Largest Number of Orders][customer-placing-the-largest-number-of-orders]

{% highlight sql %}
SELECT customer_number
FROM orders
GROUP BY customer_number
HAVING COUNT(order_number) = (
    SELECT COUNT(order_number) AS order_count
    FROM orders
    GROUP BY customer_number
    ORDER BY order_count DESC
    LIMIT 1
)
;
{% endhighlight %}

[Consecutive Available Seats][consecutive-available-seats]

{% highlight sql %}
SELECT DISTINCT c1.seat_id
FROM cinema c1
JOIN cinema c2
    ON ABS(c1.seat_id - c2.seat_id) = 1
    AND c1.free = 1 AND c2.free = 1
ORDER BY c1.seat_id;
;
{% endhighlight %}

[Friend Requests I: Overall Acceptance Rate][friend-requests-i-overall-acceptance-rate]

{% highlight sql %}
SELECT
ROUND(
    IFNULL(
        (SELECT COUNT(*)
        FROM
            (SELECT DISTINCT requester_id,
                accepter_id
            FROM RequestAccepted) n)
        /
        (SELECT COUNT(*)
        FROM
            (SELECT DISTINCT sender_id,
                send_to_id
            FROM FriendRequest) d),
        0),
    2) AS accept_rate
;
{% endhighlight %}

Cross join: Cartesian Product

[Sales Person][sales-person]

{% highlight sql %}
SELECT s.name
FROM orders o
JOIN company c
    ON o.com_id = c.com_id
    AND c.name = 'RED'
RIGHT JOIN salesperson s
    ON s.sales_id = o.sales_id
WHERE o.sales_id IS NULL
;
{% endhighlight %}

[classes-more-than-5-students]: https://leetcode.com/problems/classes-more-than-5-students/
[consecutive-available-seats]: https://leetcode.com/problems/consecutive-available-seats/
[customer-placing-the-largest-number-of-orders]: https://leetcode.com/problems/customer-placing-the-largest-number-of-orders/
[employees-earning-more-than-their-managers]: https://leetcode.com/problems/employees-earning-more-than-their-managers/
[friend-requests-i-overall-acceptance-rate]: https://leetcode.com/problems/friend-requests-i-overall-acceptance-rate/
[game-play-analysis-i]: https://leetcode.com/problems/game-play-analysis-i/
[game-play-analysis-ii]: https://leetcode.com/problems/game-play-analysis-ii/
[game-play-analysis-iii]: https://leetcode.com/problems/game-play-analysis-iii/
[reformat-department-table]: https://leetcode.com/problems/reformat-department-table/
[rising-temperature]: https://leetcode.com/problems/rising-temperature/
[sales-person]: https://leetcode.com/problems/sales-person/
[second-highest-salary]: https://leetcode.com/problems/second-highest-salary/
[swap-salary]: https://leetcode.com/problems/swap-salary/
