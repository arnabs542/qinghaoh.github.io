---
layout: post
title:  "SQL"
tag: sql
---
[Swap Salary][swap-salary]

{% highlight sql %}
UPDATE salary
SET
    sex = CASE sex
        WHEN 'm' THEN 'f'
        ELSE 'm'
    END;
{% endhighlight %}

{% highlight sql %}
UPDATE salary
SET sex = IF(sex='m', 'f', 'm');
{% endhighlight %}

{% highlight sql %}
UPDATE salary
SET sex = CHAR(ASCII('f') ^ ASCII('m') ^ ASCII(sex));
{% endhighlight %}

[Percentage of Users Attended a Contest][percentage-of-users-attended-a-contest]

{% highlight sql %}
SELECT
    contest_id, ROUND(COUNT(DISTINCT user_id) / (SELECT COUNT(*) FROM Users) * 100, 2) AS percentage
FROM
    Register
GROUP BY
    contest_id
ORDER BY
    percentage DESC, contest_id
;
{% endhighlight %}

[Classes More Than 5 Students][classes-more-than-5-students]

{% highlight sql %}
SELECT
    class
FROM
    (SELECT
        class, COUNT(DISTINCT student) AS num
    FROM
        courses
    GROUP BY class) AS temp_table
WHERE
    num >= 5
;
{% endhighlight %}

[Rising Temprature][rising-temperature]

{% highlight sql %}
SELECT
    weather.id AS 'Id'
FROM
    weather
JOIN
    weather w ON DATEDIFF(weather.recordDate, w.recordDate) = 1
        AND weather.Temperature > w.Temperature
;
{% endhighlight %}

[Restaurant Growth][restaurant-growth]

{% highlight sql %}
WITH Day AS(
    SELECT visited_on, SUM(amount) AS day_sum
    FROM Customer
    GROUP BY visited_on)

SELECT
    a.visited_on AS visited_on,
    SUM(b.day_sum) AS amount,
    ROUND(AVG(b.day_sum), 2) AS average_amount
FROM
    Day a, Day b
WHERE
    DATEDIFF(a.visited_on, b.visited_on) BETWEEN 0 AND 6
GROUP BY
    a.visited_on
HAVING
    COUNT(b.visited_on) = 7
;
{% endhighlight %}

[Second Highest Salary][second-highest-salary]

{% highlight sql %}
SELECT
    (SELECT DISTINCT
            Salary
        FROM
            Employee
        ORDER BY
            Salary DESC
        LIMIT 1 OFFSET 1) AS SecondHighestSalary
;
{% endhighlight %}

{% highlight sql %}
SELECT
    IFNULL(
      (SELECT DISTINCT
              Salary
          FROM
              Employee
          ORDER BY
              Salary DESC
          LIMIT 1 OFFSET 1),
    NULL) AS SecondHighestSalary
;
{% endhighlight %}

{% highlight sql %}
SELECT
    MAX(Salary) AS SecondHighestSalary
FROM
    Employee
WHERE
    Salary < (SELECT MAX(Salary) FROM Employee)
;
{% endhighlight %}

[Employees Earning More Than Their Managers][employees-earning-more-than-their-managers]

{% highlight sql %}
SELECT
     a.NAME AS Employee
FROM Employee AS a JOIN Employee AS b
     ON a.ManagerId = b.Id
     AND a.Salary > b.Salary
;
{% endhighlight %}

[Reformat Department Table][reformat-department-table]

{% highlight sql %}
SELECT id, 
	SUM(CASE WHEN month = 'Jan' THEN revenue ELSE null END) AS Jan_Revenue,
	SUM(CASE WHEN month = 'Feb' THEN revenue ELSE null END) AS Feb_Revenue,
	SUM(CASE WHEN month = 'Mar' THEN revenue ELSE null END) AS Mar_Revenue,
	SUM(CASE WHEN month = 'Apr' THEN revenue ELSE null END) AS Apr_Revenue,
	SUM(CASE WHEN month = 'May' THEN revenue ELSE null END) AS May_Revenue,
	SUM(CASE WHEN month = 'Jun' THEN revenue ELSE null END) AS Jun_Revenue,
	SUM(CASE WHEN month = 'Jul' THEN revenue ELSE null END) AS Jul_Revenue,
	SUM(CASE WHEN month = 'Aug' THEN revenue ELSE null END) AS Aug_Revenue,
	SUM(CASE WHEN month = 'Sep' THEN revenue ELSE null END) AS Sep_Revenue,
	SUM(CASE WHEN month = 'Oct' THEN revenue ELSE null END) AS Oct_Revenue,
	SUM(CASE WHEN month = 'Nov' THEN revenue ELSE null END) AS Nov_Revenue,
	SUM(CASE WHEN month = 'Dec' THEN revenue ELSE null END) AS Dec_Revenue
FROM department
GROUP BY id
ORDER BY id
;
{% endhighlight %}

[Evaluate Boolean Expression][evaluate-boolean-expression]

{% highlight sql %}
SELECT
    e.left_operand,
    e.operator,
    e.right_operand,
    (
        CASE
            WHEN e.operator = '<' AND v1.value < v2.value THEN 'true'
            WHEN e.operator = '=' AND v1.value = v2.value THEN 'true'
            WHEN e.operator = '>' AND v1.value > v2.value THEN 'true'
            ELSE 'false'
        END
    ) AS value
FROM
    Expressions e
JOIN
    Variables v1
ON
    e.left_operand = v1.name
JOIN
    Variables v2
ON
    e.right_operand = v2.name
;
{% endhighlight %}

[Game Play Analysis I][game-play-analysis-i]

{% highlight sql %}
SELECT
    player_id,
    MIN(event_date) AS first_login
FROM
    Activity
GROUP BY
    player_id
;
{% endhighlight %}

[Game Play Analysis II][game-play-analysis-ii]

{% highlight sql %}
SELECT
    player_id,
    device_id
FROM Activity
WHERE
    (player_id, event_date) IN
        (SELECT
             player_id,
             MIN(event_date)
         FROM
             Activity
         GROUP BY
             player_id)
;
{% endhighlight %}

[Game Play Analysis III][game-play-analysis-iii]

{% highlight sql %}
SELECT a1.player_id,
    a1.event_date,
    SUM(a2.games_played) AS games_played_so_far
FROM Activity a1
JOIN Activity a2
    ON a1.event_date >= a2.event_date
    AND a1.player_id = a2.player_id
GROUP BY a1.player_id, a1.event_date
;
{% endhighlight %}

MySQL uses three-valued logic -- TRUE, FALSE and UNKNOWN. Anything compared to NULL evaluates to the third value: UNKNOWN. That “anything” includes NULL itself! That’s why MySQL provides the IS NULL and IS NOT NULL operators to specifically check for NULL.

[Customer Placing the Largest Number of Orders][customer-placing-the-largest-number-of-orders]

{% highlight sql %}
SELECT
    customer_number
FROM
    orders
GROUP BY
    customer_number
HAVING
    COUNT(order_number) = (
        SELECT
            COUNT(order_number) AS order_count
        FROM
            orders
        GROUP BY
            customer_number
        ORDER BY
            order_count DESC
        LIMIT 1
)
;
{% endhighlight %}

[Sales Analysis I][sales-analysis-i]

{% highlight sql %}
SELECT
    seller_id
FROM
    Sales
GROUP BY
    seller_id
HAVING SUM(price) >= ALL(
    SELECT
        SUM(price)
    FROM
        Sales
    GROUP BY
        seller_id)
;
{% endhighlight %}

[Consecutive Available Seats][consecutive-available-seats]

{% highlight sql %}
SELECT DISTINCT c1.seat_id
FROM cinema c1
JOIN cinema c2
    ON ABS(c1.seat_id - c2.seat_id) = 1
    AND c1.free = 1 AND c2.free = 1
ORDER BY c1.seat_id;
;
{% endhighlight %}

[Friend Requests I: Overall Acceptance Rate][friend-requests-i-overall-acceptance-rate]

{% highlight sql %}
SELECT
ROUND(
    IFNULL(
        (SELECT COUNT(*)
        FROM
            (SELECT DISTINCT requester_id,
                accepter_id
            FROM RequestAccepted) n)
        /
        (SELECT COUNT(*)
        FROM
            (SELECT DISTINCT sender_id,
                send_to_id
            FROM FriendRequest) d),
        0),
    2) AS accept_rate
;
{% endhighlight %}

Cross join: Cartesian Product

[Sales Person][sales-person]

{% highlight sql %}
SELECT s.name
FROM orders o
JOIN company c
    ON o.com_id = c.com_id
    AND c.name = 'RED'
RIGHT JOIN salesperson s
    ON s.sales_id = o.sales_id
WHERE o.sales_id IS NULL
;
{% endhighlight %}

[Actors and Directors Who Cooperated At Least Three Times][actors-and-directors-who-cooperated-at-least-three-times]

{% highlight sql %}
SELECT actor_id,
    director_id
FROM ActorDirector
GROUP BY actor_id, director_id
HAVING COUNT(actor_id) >= 3
;
{% endhighlight %}

[Game Play Analysis IV][game-play-analysis-iv]

{% highlight sql %}
SELECT
    ROUND(COUNT(t2.player_id) / COUNT(t1.player_id), 2) AS fraction
FROM
    (SELECT player_id, MIN(event_date) AS first_login
     FROM Activity
     GROUP BY player_id) t1
LEFT JOIN Activity t2
    ON t1.player_id = t2.player_id AND t1.first_login = t2.event_date - 1
;
{% endhighlight %}

[Get Highest Answer Rate Question][get-highest-answer-rate-question]

{% highlight sql %}
SELECT question_id as survey_log
FROM
    (SELECT
        question_id,
        SUM(CASE WHEN action="show" THEN 1 ELSE 0 END) as num_show,
        SUM(CASE WHEN action="answer" THEN 1 ELSE 0 END) as num_answer
     FROM survey_log
     GROUP BY question_id
) as q
ORDER BY (num_answer / num_show) DESC
LIMIT 1
;
{% endhighlight %}

[Customers Who Bought All Products][customers-who-bought-all-products]

{% highlight sql %}
SELECT customer_id
FROM customer c
GROUP BY customer_id
HAVING COUNT(DISTINCT product_key) =
    (SELECT COUNT(DISTINCT product_key)
     FROM product)
;
{% endhighlight %}

[Tree Node][tree-node]

{% highlight sql %}
SELECT id,
    CASE WHEN p_id IS NULL THEN 'Root'
         WHEN id IN (SELECT p_id FROM tree) THEN 'Inner'
         ELSE 'Leaf'
    END AS Type
FROM tree
ORDER BY id
;
{% endhighlight %}

# OVER

[Calculate Salaries][calculate-salaries]

{% highlight sql %}
SELECT
    company_id,
    employee_id,
    employee_name,
    CASE WHEN max_salary < 1000 THEN salary
         WHEN max_salary > 10000 THEN ROUND(salary * (1 - 0.49))
         ELSE ROUND(salary * (1 - 0.24)) END AS salary
FROM
    (SELECT
        s.*,
        MAX(salary) OVER(PARTITION BY company_id) AS max_salary
     FROM
        Salaries s) m
;
{% endhighlight %}

If **PARTITION BY** is not specified, the function treats all rows of the query result set as a single partition.

[Find the Start and End Number of Continuous Ranges][find-the-start-and-end-number-of-continuous-ranges]

{% highlight sql %}
SELECT
    MIN(log_id) AS start_id, MAX(log_id) AS end_id
FROM
    (SELECT
        log_id, ROW_NUMBER() OVER(ORDER BY log_id) AS num
     FROM
        Logs) l
GROUP BY
    log_id - num
;
{% endhighlight %}

```
log_id, num, difference
1, 1, 0
2, 2, 0
3, 3, 0
7, 4, 3
8, 5, 3
10, 6, 4
```

[Nth Highest Salary][nth-highest-salary]

{% highlight sql %}
CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
  DECLARE M INT;
  SET M = N - 1;
  RETURN (
      # Write your MySQL query statement below.
      SELECT DISTINCT Salary
      FROM Employee
      ORDER BY Salary DESC
      LIMIT M, 1
  );
END
{% endhighlight %}

[Leetflex Banned Accounts][leetflex-banned-accounts]

{% highlight sql %}
SELECT
    DISTINCT a.account_id
FROM
    LogInfo a, LogInfo b
-- BETWEEN is inclusive
WHERE
    a.login BETWEEN b.login AND b.logout
    AND a.account_id = b.account_id
    AND a.ip_address != b.ip_address
;
{% endhighlight %}

[Immediate Food Delivery II][immediate-food-delivery-ii]

{% highlight sql %}
SELECT
    ROUND(100 * SUM(
        CASE order_date
            WHEN customer_pref_delivery_date THEN 1
            ELSE 0
        END) / COUNT(distinct customer_id), 2) AS immediate_percentage
FROM
    Delivery
WHERE
    (customer_id, order_date)
IN
    (SELECT
        customer_id, MIN(order_date) as min_date
    FROM
        Delivery
    GROUP BY
        customer_id
    )
;
{% endhighlight %}

[Countries You Can Safely Invest In][countries-you-can-safely-invest-in]

{% highlight sql %}
SELECT
    co.name AS country
FROM
    Person p
JOIN
    Calls ca
ON
    p.id = ca.caller_id OR p.id = ca.callee_id
JOIN
    Country co
ON
    co.country_code = LEFT(p.phone_number, 3)
GROUP BY
    co.name
HAVING
    AVG(duration) > (SELECT AVG(duration) FROM Calls)
;
{% endhighlight %}

# UNION

[Product Price at a Given Date][product-price-at-a-given-date]

{% highlight sql %}
SELECT
    DISTINCT product_id, 10 as price
FROM
    Products
GROUP BY
    product_id
HAVING
    MIN(change_date) > '2019-08-16'

UNION

SELECT
    product_id, new_price
FROM
    Products
WHERE
    (product_id, change_date)
IN
    (SELECT
        product_id, MAX(change_date) AS recent_date
    FROM
        Products
    WHERE
        change_date <= "2019-08-16"
    GROUP BY
        product_id)
;
{% endhighlight %}

[Number of Trusted Contacts of a Customer][number-of-trusted-contacts-of-a-customer]

{% highlight sql %}
SELECT
    i.invoice_id,
    cu.customer_name,
    i.price,
    COUNT(co.user_id) as contacts_cnt,
    COUNT(cu2.email) as trusted_contacts_cnt
FROM
    invoices i
JOIN
    Customers cu
ON
    cu.customer_id = i.user_id
LEFT JOIN
    Contacts co
ON
    co.user_id = cu.customer_id
LEFT JOIN
    Customers cu2
ON
    cu2.email = co.contact_email
GROUP BY
    i.invoice_id, cu.customer_name, i.price
ORDER BY
    i.invoice_id
;
{% endhighlight %}

[Monthly Transactions II][monthly-transactions-ii]

{% highlight sql %}
SELECT
    month,
    country,
    SUM(CASE WHEN state = 'approved' THEN 1 ELSE 0 END) AS approved_count,
    SUM(CASE WHEN state = 'approved' THEN amount ELSE 0 END) AS approved_amount,
    SUM(CASE WHEN state = 'back' THEN 1 ELSE 0 END) AS chargeback_count,
    SUM(CASE WHEN state = 'back' THEN amount ELSE 0 END) AS chargeback_amount
FROM
    (SELECT
        LEFT(c.trans_date, 7) AS month,
        country,
        'back' AS state,
        amount
    FROM
        Chargebacks c
    JOIN
        Transactions t
    ON
        c.trans_id = t.id

-- some trans_date exists in Chargebacks only
-- so we need to UNION the two tables
    UNION ALL

    SELECT
        LEFT(trans_date, 7) AS month,
        country,
        state,
        amount
    FROM
        Transactions
    WHERE
        state = 'approved'
    ) s
GROUP BY
    month, country
;
{% endhighlight %}

# Functions

{% highlight sql %}
LEFT(str,len)
{% endhighlight %}

{% highlight sql %}
DATE_FORMAT(date,format)
{% endhighlight %}
[format](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_date-format)

{% highlight sql %}
YEAR(date)
{% endhighlight %}

[actors-an-directors-who-cooperated-at-least-three-times]: https://leetcode.com/problems/actors-and-directors-who-cooperated-at-least-three-times/
[calculate-salaries]: https://leetcode.com/problems/calculate-salaries/
[classes-more-than-5-students]: https://leetcode.com/problems/classes-more-than-5-students/
[consecutive-available-seats]: https://leetcode.com/problems/consecutive-available-seats/
[countries-you-can-safely-invest-in]: https://leetcode.com/problems/countries-you-can-safely-invest-in/
[customer-placing-the-largest-number-of-orders]: https://leetcode.com/problems/customer-placing-the-largest-number-of-orders/
[customers-who-bought-all-products]: https://leetcode.com/problems/customers-who-bought-all-products/
[employees-earning-more-than-their-managers]: https://leetcode.com/problems/employees-earning-more-than-their-managers/
[evaluate-boolean-expression]: https://leetcode.com/problems/evaluate-boolean-expression/
[find-the-start-and-end-number-of-continuous-ranges]: https://leetcode.com/problems/find-the-start-and-end-number-of-continuous-ranges/
[friend-requests-i-overall-acceptance-rate]: https://leetcode.com/problems/friend-requests-i-overall-acceptance-rate/
[game-play-analysis-i]: https://leetcode.com/problems/game-play-analysis-i/
[game-play-analysis-ii]: https://leetcode.com/problems/game-play-analysis-ii/
[game-play-analysis-iii]: https://leetcode.com/problems/game-play-analysis-iii/
[game-play-analysis-iv]: https://leetcode.com/problems/game-play-analysis-iv/
[get-highest-answer-rate-question]: https://leetcode.com/problems/get-highest-answer-rate-question/
[immediate-food-delivery-ii]: https://leetcode.com/problems/immediate-food-delivery-ii/
[leetflex-banned-accounts]: https://leetcode.com/problems/leetflex-banned-accounts/
[monthly-transactions-ii]: https://leetcode.com/problems/monthly-transactions-ii/
[nth-highest-salary]: https://leetcode.com/problems/nth-highest-salary/
[number-of-trusted-contacts-of-a-customer]: https://leetcode.com/problems/number-of-trusted-contacts-of-a-customer/
[percentage-of-users-attended-a-contest]: https://leetcode.com/problems/percentage-of-users-attended-a-contest/
[product-price-at-a-given-date]: https://leetcode.com/problems/product-price-at-a-given-date/
[reformat-department-table]: https://leetcode.com/problems/reformat-department-table/
[restaurant-growth]: https://leetcode.com/problems/restaurant-growth/
[rising-temperature]: https://leetcode.com/problems/rising-temperature/
[sales-analysis-i]: https://leetcode.com/problems/sales-analysis-i/
[sales-person]: https://leetcode.com/problems/sales-person/
[second-highest-salary]: https://leetcode.com/problems/second-highest-salary/
[swap-salary]: https://leetcode.com/problems/swap-salary/
[tree-node]: https://leetcode.com/problems/tree-node/
