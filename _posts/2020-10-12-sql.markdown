---
layout: post
title:  "SQL"
tag: sql
---
[Swap Salary][swap-salary]

{% highlight sql %}
UPDATE salary
SET
    sex = CASE sex
        WHEN 'm' THEN 'f'
        ELSE 'm'
    END;
{% endhighlight %}

{% highlight sql %}
UPDATE salary
SET sex = IF(sex='m', 'f', 'm');
{% endhighlight %}

{% highlight sql %}
UPDATE salary
SET sex = CHAR(ASCII('f') ^ ASCII('m') ^ ASCII(sex));
{% endhighlight %}

[Classes More Than 5 Students][classes-more-than-5-students]

{% highlight sql %}
SELECT
    class
FROM
    (SELECT
        class, COUNT(DISTINCT student) AS num
    FROM
        courses
    GROUP BY class) AS temp_table
WHERE
    num >= 5
;
{% endhighlight %}

[Rising Temprature][rising-temperature]

{% highlight sql %}
SELECT
    weather.id AS 'Id'
FROM
    weather
        JOIN
    weather w ON DATEDIFF(weather.recordDate, w.recordDate) = 1
        AND weather.Temperature > w.Temperature
;
{% endhighlight %}

[Second Highest Salary][second-highest-salary]

{% highlight sql %}
SELECT
    (SELECT DISTINCT
            Salary
        FROM
            Employee
        ORDER BY Salary DESC
        LIMIT 1 OFFSET 1) AS SecondHighestSalary
;
{% endhighlight %}

{% highlight sql %}
SELECT
    IFNULL(
      (SELECT DISTINCT Salary
       FROM Employee
       ORDER BY Salary DESC
        LIMIT 1 OFFSET 1),
    NULL) AS SecondHighestSalary
;
{% endhighlight %}

{% highlight sql %}
SELECT
    MAX(Salary) AS SecondHighestSalary
FROM
    Employee
WHERE
    Salary < (SELECT MAX(Salary) FROM Employee)
;
{% endhighlight %}

[Employees Earning More Than Their Managers][employees-earning-more-than-their-managers]

{% highlight sql %}
SELECT
     a.NAME AS Employee
FROM Employee AS a JOIN Employee AS b
     ON a.ManagerId = b.Id
     AND a.Salary > b.Salary
;
{% endhighlight %}

[Reformat Department Table][reformat-department-table]

{% highlight sql %}
SELECT id, 
	SUM(CASE WHEN month = 'Jan' THEN revenue ELSE null END) AS Jan_Revenue,
	SUM(CASE WHEN month = 'Feb' THEN revenue ELSE null END) AS Feb_Revenue,
	SUM(CASE WHEN month = 'Mar' THEN revenue ELSE null END) AS Mar_Revenue,
	SUM(CASE WHEN month = 'Apr' THEN revenue ELSE null END) AS Apr_Revenue,
	SUM(CASE WHEN month = 'May' THEN revenue ELSE null END) AS May_Revenue,
	SUM(CASE WHEN month = 'Jun' THEN revenue ELSE null END) AS Jun_Revenue,
	SUM(CASE WHEN month = 'Jul' THEN revenue ELSE null END) AS Jul_Revenue,
	SUM(CASE WHEN month = 'Aug' THEN revenue ELSE null END) AS Aug_Revenue,
	SUM(CASE WHEN month = 'Sep' THEN revenue ELSE null END) AS Sep_Revenue,
	SUM(CASE WHEN month = 'Oct' THEN revenue ELSE null END) AS Oct_Revenue,
	SUM(CASE WHEN month = 'Nov' THEN revenue ELSE null END) AS Nov_Revenue,
	SUM(CASE WHEN month = 'Dec' THEN revenue ELSE null END) AS Dec_Revenue
FROM department
GROUP BY id
ORDER BY id
;
{% endhighlight %}

[classes-more-than-5-students]: https://leetcode.com/problems/classes-more-than-5-students/
[employees-earning-more-than-their-managers]: https://leetcode.com/problems/employees-earning-more-than-their-managers/
[reformat-department-table]: https://leetcode.com/problems/reformat-department-table/
[rising-temperature]: https://leetcode.com/problems/rising-temperature/
[second-highest-salary]: https://leetcode.com/problems/second-highest-salary/
[swap-salary]: https://leetcode.com/problems/swap-salary/
