---
layout: post
title:  "Subtree"
tags: tree
---
[Subtree of Another Tree][subtree-of-another-tree]

# Lowest Common Ancestor

[Lowest common ancestor (LCA)](https://en.wikipedia.org/wiki/Lowest_common_ancestor)

[Lowest Common Ancestor of a Binary Tree][lowest-common-ancestor-of-a-binary-tree]

{% highlight java %}
private TreeNode lca = null;

// Relax the condition so the problem can be solved recursively:
//   - if only p (or q) exists, returns p (or q)
//   - if neither p or q exists, returns null
public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    // LCA is found, returns early
    if (lca != null) {
        return null;
    }

    if (root == null || root == p || root == q) {
        return root;
    }

    TreeNode left = lowestCommonAncestor(root.left, p, q), right = lowestCommonAncestor(root.right, p, q);
    if (left != null && right != null) {
        lca = root;
        return lca;
    }

    return left == null ? right : left;
}
{% endhighlight %}

[Lowest Common Ancestor of a Binary Tree II][lowest-common-ancestor-of-a-binary-tree-ii]

{% highlight java %}
private int count = 0;

public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    TreeNode lca = dfs(root, p, q);
    return count == 2 ? lca : null;
}

/**
 * If subtree contains either p or q, returns this node;
 * if subtree contains both p and q, returns LCA of them;
 * otherwise, returns null.
 */
private TreeNode dfs(TreeNode node, TreeNode p, TreeNode q) {
    if (node == null) {
        return null;
    }

    TreeNode left = dfs(node.left, p, q), right = dfs(node.right, p, q);

    if (node == p || node == q) {
        count++;
        return node;
    }

    if (left != null && right != null) {
        return node;
    }

    return left == null ? right : left;
}
{% endhighlight %}

[Lowest Common Ancestor of a Binary Tree III][lowest-common-ancestor-of-a-binary-tree-iii]

{% highlight java %}
public Node lowestCommonAncestor(Node p, Node q) {
    Node a = p, b = q;
    while (a != b) {
        a = a == null? q : a.parent;
        b = b == null? p : b.parent;    
    }
    return a;
}
{% endhighlight %}

[Intersection of Two Linked Lists][intersection-of-two-linked-lists]

# Binary Lifting

[Kth Ancestor of a Tree Node][kth-ancestor-of-a-tree-node]

{% highlight java %}
// dp[i][j] = j-th node's 2^(i)th ancestor in the path
private int[][] dp;
private int maxPow;

// binary lifting
public TreeAncestor(int n, int[] parent) {
    // log_base_2(n)
    this.maxPow = (int)(Math.log(n) / Math.log(2)) + 1;
    this.dp = new int[maxPow][n];

    // dp[0][j] = parent[j]: first parent (2^0) of each node is given
    dp[0] = parent;

    for (int i = 1; i < maxPow; i++) {
        for (int j = 0; j < n; j++) {
            // to find the (2 ^ i)-th ancestor of j
            // recursively finds j-th node's 2 ^ (i - 1)th ancestor's 2 ^ (i - 1)th ancestor
            // 2 ^ i = 2 ^ (i - 1) + 2 ^ (i - 1)
            int prev = dp[i - 1][j];
            dp[i][j] = prev == -1 ? -1 : dp[i - 1][prev];
        }
    }
}

// binary search
public int getKthAncestor(int node, int k) {
    int currPow = maxPow;
    while (k > 0 && node >= 0) {
        if (k >= 1 << currPow) {
            node = dp[currPow][node];
            k -= 1 << currPow;
        } else {
            // takes smaller stride
            currPow--;
        }
    }
    return node;
}
{% endhighlight %}

[kth-ancestor-of-a-tree-node]: https://leetcode.com/problems/kth-ancestor-of-a-tree-node/
[intersection-of-two-linked-lists]: https://leetcode.com/problems/intersection-of-two-linked-lists/
[lowest-common-ancestor-of-a-binary-tree]: https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/
[lowest-common-ancestor-of-a-binary-tree-ii]: https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-ii/
[lowest-common-ancestor-of-a-binary-tree-iii]: https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-iii/
[subtree-of-another-tree]: https://leetcode.com/problems/subtree-of-another-tree/
