---
layout: post
title:  "String"
tags: string
---
# Transformation

[String Transforms Into Another String][string-transforms-into-another-string]

{% highlight java %}
public boolean canConvert(String str1, String str2) {
    if (str1.equals(str2)) {
        return true;
    }

    Map<Character, Character> map = new HashMap<>();
    for (int i = 0; i < str1.length(); i++) {
        char c1 = str1.charAt(i), c2 = str2.charAt(i);
        if (map.getOrDefault(c1, c2) != c2) {
            return false;
        }

        map.put(c1, c2);
    }

    // checks if there's an available temporary char
    return new HashSet<Character>(map.values()).size() < 26;
}
{% endhighlight %}

Case 1:

```
"aca" -> "cec"
key      value
a    ->    c
c    ->    e
```
There's no cycle, so we substitue the key with the value backwards in `str1`:
```
"aca" -> "aea" -> "cec"
```

Case 2:

```
"ace" -> "cea"
key      value
a    ->    c
c    ->    e
e    ->    a
```
There's a cycle, so we need to insert a temporary char to break the cycle, then convert `str1` backwards in two steps:
```
a -> x

"ace" -> "xce"

x -> c
c -> e
e -> a

"xce" -> "xca" -> "xea" -> "cea"
```
# Lydon Word

A [Lyndon word](https://en.wikipedia.org/wiki/Lyndon_word) is a nonempty string that is strictly smaller in lexicographic order than all of its rotations.

Lyndon factorization: https://cp-algorithms.com/string/lyndon_factorization.html

[Orderly Queue][orderly-queue]

{% highlight java %}
// Lyndon word
// Duval Algorithm
int n = s.length(), index = 0, i = 0;
while (i < n) {
    index = i;
    int j = i + 1, m = i;
    while (j < n && s.charAt(m) <= s.charAt(j)) {
        if (s.charAt(m) < s.charAt(j)) {
            m = i;
        } else {
            m++;
        }
        j++;
    }
    while (i <= m) {
        i += j - m;
    }
}
return s.substring(index) + s.substring(0, index);
{% endhighlight %}

[Sentence Screen Fitting][sentence-screen-fitting]

{% highlight java %}
public int wordsTyping(String[] sentence, int rows, int cols) {
    String s = String.join(" ", sentence) + " ";
    int start = 0, l = s.length();
    for (int i = 0; i < rows; i++) {
        start += cols;
        if (s.charAt(start % l) == ' ') {
            start++;
        } else {
            while (start > 0 && s.charAt((start - 1) % l) != ' ') {
                start--;
            }
        }
    }

    return start / s.length();
}
{% endhighlight %}

[Decoded String at Index][decoded-string-at-index]

{% highlight java %}
public String decodeAtIndex(String S, int K) {
    long len = 0;
    int n = S.length();

    // gets the length of decoded String
    int i = 0;
    while (i < n) {
        char c = S.charAt(i);
        if (Character.isDigit(c)) {
            len *= c - '0';
        } else {
            len++;
        }

        if (len >= K) {
            break;
        }
        i++;
    }

    // think backwards
    while (i >= 0) {
        char c = S.charAt(i);
        if (Character.isDigit(c)) {
            len /= c - '0';
            K %= len;
        } else {
            if (K % len == 0) {
                return Character.toString(c);
            }
            len--;
        }
        i--;
    }

    return "";
}
{% endhighlight %}

For example, `s = "leet2code3", k = 10`

# Swap

[Check If String Is Transformable With Substring Sort Operations][check-if-string-is-transformable-with-substring-sort-operations]

{% highlight java %}
public boolean isTransformable(String s, String t) {
    // we can move a char freely to the left until it hits a smaller char
    // e.g. "0231" > "0213" > "0123"
    // checks if we can move required char in s to the left to get t
    Deque<Integer> indexes[] = new Deque[10];
    for (int i = 0; i < indexes.length; i++) {
        indexes[i] = new ArrayDeque<>();
    }

    // decreasing stack
    int n = s.length();
    for (int i = n - 1; i >= 0; i--) {
        indexes[s.charAt(i) - '0'].push(i);
    }

    for (char ch : t.toCharArray()) {
        // s has available d
        int d = ch - '0';
        if (indexes[d].isEmpty()) {
            return false;
        }

        for (int i = 0; i < d; i++) {
            // check if there is a digit < d on the left of d
            // e.g. s = "12345", t = "12435"
            if (!indexes[i].isEmpty() && indexes[i].peek() < indexes[d].peek()) {
                return false;
            }
        }
        indexes[d].pop();
    }
    return true;
}
{% endhighlight %}

[check-if-string-is-transformable-with-substring-sort-operations]: https://leetcode.com/problems/check-if-string-is-transformable-with-substring-sort-operations/
[decoded-string-at-index]: https://leetcode.com/problems/decoded-string-at-index/
[orderly-queue]: https://leetcode.com/problems/orderly-queue/
[sentence-screen-fitting]: https://leetcode.com/problems/sentence-screen-fitting/
[string-transforms-into-another-string]: https://leetcode.com/problems/string-transforms-into-another-string/
