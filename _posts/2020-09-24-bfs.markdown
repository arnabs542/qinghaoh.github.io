---
layout: post
title:  "BFS"
tags: bfs
---
# Template

## Queue

# Deduplication

[Perfect Squares][perfect-squares]

{% highlight java %}
public int numSquares(int n) {
    // pre-calculates the square numbers
    int[] squares = new int[(int)Math.sqrt(n) + 1];
    for (int i = 1; i < squares.length; ++i) {
        squares[i] = i * i;
    }

    Set<Integer> q = new HashSet<>();
    q.add(n);

    int level = 0;
    while (!q.isEmpty()) {
        level++;
        Set<Integer> next = new HashSet<Integer>();

        for (int remainder : q) {
            for (int s : squares) {
                if (remainder == s) {
                    return level;
                }

                if (remainder >= s) {
                    next.add(remainder - s);
                }
            }
        }
        q = next;
    }
    return level;
}
{% endhighlight %}

# Variants

[Minimum Knight Moves][minimum-knight-moves]

Symmetry

[Jump Game II][jump-game-ii]

{% highlight java %}
public int jump(int[] nums) {
    // implicit BFS
    int jump = 0, reach = 0, currEnd = 0;
    for (int i = 0; i < nums.length - 1; i++) {
        reach = Math.max(reach, i + nums[i]);

        // all the nodes on the current level are visited
        if (i == currEnd) {
            // increments level
            // nodes on the next level can be reached with this number of jumps
            jump++;
            // gets next level size
            currEnd = reach;
        }
    }
    return jump;
}
{% endhighlight %}

If it's not guaranteed to reach the last index:

{% highlight java %}
public int jump(int[] nums) {
    // implicit BFS
    int jumps = 0, reach = 0, currEnd = 0;
    for (int i = 0; i < nums.length; i++) {
        if (i > reach) {
            return -1;
        }

        reach = Math.max(reach, i + nums[i]);

        // all the nodes on the current level are visited
        if (i < nums.length - 1 && i == currEnd) {
            // increments level
            // nodes on the next level can be reached with this number of jumps
            jumps++;
            // gets next level size
            currEnd = reach;
        }
    }
    return jumps;
}
{% endhighlight %}

[Minimum Jumps to Reach Home][minimum-jumps-to-reach-home]

{% highlight java %}
public int minimumJumps(int[] forbidden, int a, int b, int x) {
    Set<Integer> visited = new HashSet<>();
    int furthest = x;
    for (int p : forbidden) {
        visited.add(p);  // forward
        visited.add(-p);  // backward
        furthest = Math.max(furthest, p);
    }
    furthest += a + b;

    // position, direction (0: forward, 1: backward)
    int[] node = {0, 0};
    Queue<int[]> q = new LinkedList();
    q.offer(node);
    visited.add(0);

    int jumps = 0;
    while (!q.isEmpty()) {
        for (int i = q.size(); i > 0; i--) {
            node = q.poll();
            if (node[0] == x) {
                return jumps;
            }

            int forward = node[0] + a;
            if (forward <= furthest && visited.add(forward)) {
                q.offer(new int[]{forward, 0});
            }

            int backward = node[0] - b;
            if (node[1] == 0 && backward >= 0 && visited.add(-backward)) {
                q.offer(new int[]{backward, 1});
            }
        }
        jumps++;
    }
    return -1;
}
{% endhighlight %}

[Nested List Weight Sum II][nested-list-weight-sum-ii]

{% highlight java %}
public int depthSumInverse(List<NestedInteger> nestedList) {
    Queue<NestedInteger> q = new LinkedList(nestedList);
    int runningSum = 0, sum = 0;
    while (!q.isEmpty()) {
       for (int i = q.size(); i > 0; i--) {
           NestedInteger ni = q.poll();
           if (ni.isInteger()) {
               runningSum += ni.getInteger();
           } else {
               q.addAll(ni.getList());
           }
       }
       sum += runningSum;
    }
    return sum;
}
{% endhighlight %}

[Shortest Path with Alternating Colors][shortest-path-with-alternating-colors]

{% highlight java %}
public int[] shortestAlternatingPaths(int n, int[][] red_edges, int[][] blue_edges) {
    // red: 0
    // blue: 1
    List<List<Integer>>[] graph = new ArrayList[2];

    for (int i = 0; i < graph.length; i++) {
        graph[i] = new ArrayList<>();
    }
    for (int i = 0; i < n; i++) {
        graph[0].add(new ArrayList<>());
        graph[1].add(new ArrayList<>());
    }

    for (int[] r : red_edges) {
        graph[0].get(r[0]).add(r[1]);
    }
    for (int[] b : blue_edges) {
        graph[1].get(b[0]).add(b[1]);
    }

    // dp
    int max = 2 * n;
    int[][] distance = new int[2][n];
    // distance[][0] == 0
    // maximum distance == 2 * n - 3
    // it happens when in a path from 0 to target,
    // all the intermediate nodes (excluding 0 and target) have an additional self-edge
    for (int i = 1; i < n; i++) {
        distance[0][i] = max;
        distance[1][i] = max;
    }

    Queue<int[]> q = new LinkedList<>();
    // either with red or blue
    q.offer(new int[] {0, 0});
    q.offer(new int[] {0, 1});

    while (!q.isEmpty()) {
        int[] node = q.poll();
        int color = node[1];

        // No need to keep track of level up to now
        // distance[][] is the shortest path so far
        // it gets rid of duplicate computation
        for (int neighbor : graph[1 - color].get(node[0])) {
            if (distance[1 - color][neighbor] == max) {
                distance[1 - color][neighbor] = distance[color][node[0]] + 1;
                q.offer(new int[]{neighbor, 1 - color});
            }
        }
    }

    int[] answer = new int[n];
    for (int i = 0; i < n; i++) {
        int p = Math.min(distance[0][i], distance[1][i]);
        answer[i] = (p == max) ? -1 : p;
    }
    return answer;
}
{% endhighlight %}

[Walls and Gates][walls-and-gates]

{% highlight java %}
{% raw %}
private static final int[][] DIRECTIONS = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
{% endraw %}
public void wallsAndGates(int[][] rooms) {
    int m = rooms.length, n = rooms[0].length;
    Queue<int[]> q = new LinkedList<>();

    // enqueues all gates
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (rooms[i][j] == 0) {
                q.offer(new int[]{i, j});
            }
        }
    }

    while (!q.isEmpty()) {
        int[] p = q.poll();
        int r = p[0], c = p[1];
        for (int[] d : DIRECTIONS) {
            int i = r + d[0], j = c + d[1];
            // Integer.MAX_VALUE marks unvisited cells
            if (i < 0 || i >= m || j < 0 || j >= n || rooms[i][j] != Integer.MAX_VALUE) {
                continue;
            }

            // each gate only checks the areas within 1 space
            // so whenever an empty room is reached, it must be from the closest gate
            rooms[i][j] = rooms[r][c] + 1;
            q.offer(new int[] {i, j});
        }
    }
}
{% endhighlight %}

[Minimum Moves to Reach Target with Rotations][minimum-moves-to-reach-target-with-rotations]

{% highlight java %}
// {i, j, orientation (horizontal: 0, vertical: 1)}
Queue<int[]> q = new LinkedList<>();
int[] node = {0, 0, 0};
q.offer(node);

boolean[][][] visited = new boolean[n][n][2];
visited[0][0][0] = true;
{% endhighlight %}

[Shortest Path to Get All Keys][shortest-path-to-get-all-keys]

{% highlight java %}
// {i, j, key mask}
{% endhighlight %}

[Shortest Path in a Grid with Obstacles Elimination][shortest-path-in-a-grid-with-obstacles-elimination]

{% highlight java %}
// {i, j, number of eliminated obstacles}
Queue<int[]> q = new LinkedList<>();
int[] node = new int[]{0, 0, 0};
q.offer(node);

boolean[][][] visited = new boolean[m][n][k + 1];
visited[0][0][0] = true;
{% endhighlight %}

[The Maze][the-maze]

{% highlight java %}
{% raw %}
private static final int[][] DIRECTIONS = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
{% endraw %}
public boolean hasPath(int[][] maze, int[] start, int[] destination) {
    int m = maze.length, n = maze[0].length;

    // stores "stop points"
    Queue<int[]> q = new LinkedList<>();
    q.offer(start);

    boolean[][] visited = new boolean[m][n];
    visited[start[0]][start[1]] = true;

    while (!q.isEmpty()) {
        int[] p = q.poll();
        // stops AT destination
        if (p[0] == destination[0] && p[1] == destination[1]) {
            return true;
        }

        for (int[] d: DIRECTIONS) {
            int r = p[0] + d[0], c = p[1] + d[1];
            // keeps rolling until hitting a wall 
            while (r >= 0 && c >= 0 && r < m && c < n && maze[r][c] == 0) {
                r += d[0];
                c += d[1];
            }
            r -= d[0];
            c -= d[1];

            if (!visited[r][c]) {
                q.offer(new int[]{r, c});
                visited[r][c] = true;
            }
        }
    }
    return false;
}
{% endhighlight %}

[The Maze II][the-maze-ii]

{% highlight java %}
boolean[][] visited -> int[][] distance
{% endhighlight %}

[Trapping Rain Water II][trapping-rain-water-ii]

{% highlight java %}
{% raw %}
private static final int[][] DIRECTIONS = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
{% endraw %}
public int trapRainWater(int[][] heightMap) {
    int m = heightMap.length, n = heightMap[0].length;

    Queue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[2]));
    boolean[][] visited = new boolean[m][n];

    // enqueues boarder cells
    for (int i = 0; i < m; i++) {
        pq.offer(new int[] {i, 0, heightMap[i][0]});
        pq.offer(new int[] {i, n - 1, heightMap[i][n - 1]});
        visited[i][0] = visited[i][n - 1] = true;
    }

    for (int j = 1; j < n - 1; j++) {
        pq.offer(new int[] {0, j, heightMap[0][j]});
        pq.offer(new int[] {m - 1, j, heightMap[m - 1][j]});
        visited[0][j] = visited[m - 1][j] = true;
    }

    int volume = 0;
    while (!pq.isEmpty()) {
        // picks the cell with lowest height
        int[] cell = pq.poll();
        for (int[] d : DIRECTIONS) {
            int i = cell[0] + d[0], j = cell[1] + d[1];
            if (i < 0 || i == m || j < 0 || j == n || visited[i][j]) {
                continue;
            }

            // collects the water it can trap
            volume += Math.max(0, cell[2] - heightMap[i][j]);
            // updates the height
            pq.offer(new int[] {i, j, Math.max(heightMap[i][j], cell[2])});
            visited[i][j] = true;
        }
    }
    return volume;
}
{% endhighlight %}

# Prune

[K-Similar Strings][k-similar-strings]

{% highlight java %}
private List<String> getNeighbors(String source, String target) {
    List<String> list = new ArrayList<>();
    char[] arr = source.toCharArray();

    // finds an index i where source[i] != target[i]
    int i = 0;
    while (i < arr.length) {
        if (arr[i] != target.charAt(i)) {
            break;
        }
        i++;
    }

    // finds all index j where souce[j] == target[i]
    // in this case, swapping i and j makes source and target closer
    for (int j = i + 1; j < arr.length; j++) {
        if (arr[j] == target.charAt(i)) {
            swap(arr, i, j);
            list.add(new String(arr));
            swap(arr, i, j);
        }
    }
    return list;
}
{% endhighlight %}

# In-place BFS

[Rotting Oranges][rotting-oranges]

{% highlight java %}
{% raw %}
private static final int[][] DIRECTIONS = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
{% endraw %}
public int orangesRotting(int[][] grid) {
    int fresh = 0, time = 0;
    for (int i = 0; i < grid.length; i++) {
        for (int j = 0; j < grid[i].length; j++) {
            if (grid[i][j] == 1) {
                fresh++;
            }
        }
    }

    int prev = fresh;
    while (fresh > 0) {
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                // oranges that got rotten yesterday
                if (grid[i][j] == time + 2) {
                    for (int[] d : DIRECTIONS) {
                        fresh -= rot(grid, i + d[0], j + d[1], time);
                    }
                }
            }
        }

        if (fresh == prev) {
            return -1;
        }

        time++;
        prev = fresh;
    }

    return time;
}

private int rot(int[][] grid, int i, int j, int time) {
    if (i < 0 || i >= grid.length || j < 0 || j >= grid[i].length || grid[i][j] != 1) {
        return 0;
    }

    grid[i][j] = time + 3;
    return 1;
}
{% endhighlight %}

# Bidirectional BFS

[Word Ladder][word-ladder]

{% highlight java %}
public int ladderLength(String beginWord, String endWord, List<String> wordList) {
    if (!wordList.contains(endWord)) {
        return 0;
    }

    Set<String> dict = new HashSet<>(wordList);
    Set<String> beginSet = new HashSet<>(), endSet = new HashSet<>();
    beginSet.add(beginWord);
    endSet.add(endWord);

    int len = 1;
    Set<String> visited = new HashSet<>();

    while (!beginSet.isEmpty() && !endSet.isEmpty()) {
        // always makes beginSet the smaller one by swapping
        if (beginSet.size() > endSet.size()) {
            Set<String> tmp = beginSet;
            beginSet = endSet;
            endSet = tmp;
        }

        Set<String> set = new HashSet<>();  // next level of beginSet
        for (String word : beginSet) {
            char[] chs = word.toCharArray();

            for (int i = 0; i < chs.length; i++) {
                for (char c = 'a'; c <= 'z'; c++) {
                    char old = chs[i];
                    chs[i] = c;
                    String target = String.valueOf(chs);

                    // target is already visited in the other set
                    if (endSet.contains(target)) {
                        return len + 1;
                    }

                    if (!visited.contains(target) && dict.contains(target)) {
                        set.add(target);
                        visited.add(target);
                    }
                    chs[i] = old;
                }
            }
        }

        beginSet = set;
        len++;
    }

    return 0;
}
{% endhighlight %}

# Multi-Source BFS

[Map of Highest Peak][map-of-highest-peak]

{% highlight java %}
{% raw %}
private static final int[][] DIRECTIONS = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
{% endraw %}
public int[][] highestPeak(int[][] isWater) {
    int m = isWater.length, n = isWater[0].length;
    // enqueues all sources
    Queue<int[]> q = new LinkedList<>();
    int[][] height = new int[m][n];
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (isWater[i][j] == 1) {
                height[i][j] = 0;
                q.offer(new int[]{i, j});
            } else {
                height[i][j] = -1;
            }
        }
    }

    while (!q.isEmpty()) {
        int[] cell = q.poll();
        int r = cell[0], c = cell[1];
        for (int[] d : DIRECTIONS) {
            int nr = r + d[0], nc = c + d[1];
            if (nr >= 0 && nr < m && nc >= 0 && nc < n && height[nr][nc] == -1) {
                height[nr][nc] = height[r][c] + 1;
                q.offer(new int[]{nr, nc});
            }
        }
    }
    return height;
}
{% endhighlight %}

# BFS + DFS

[Minimum Cost to Make at Least One Valid Path in a Grid][minimum-cost-to-make-at-least-one-valid-path-in-a-grid]

{% highlight java %}
{% raw %}
// index = grid[i][j] - 1
private static final int[][] DIRECTIONS = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
{% endraw %}
private int[][] grid, cost;
private int m, n, level = 0;
private Queue<int[]> q = new LinkedList<>();  // {r, c}

public int minCost(int[][] grid) {
    this.grid = grid;
    this.m = grid.length;
    this.n = grid[0].length;
    this.cost = new int[m][n];

    for (int i = 0; i < m; i++) {
        Arrays.fill(cost[i], -1);
    }

    // finds all reachable cells
    dfs(0, 0);

    while (!q.isEmpty()) {
        level++;
        for (int i = q.size(); i > 0; i--) {
            int[] cell = q.poll();
            int r = cell[0], c = cell[1];

            // modifies the sign to all possible directions
            for (int[] d : DIRECTIONS) {
                dfs(r + d[0], c + d[1]);
            }
        }
    }
    return cost[m - 1][n - 1];
}

private void dfs(int r, int c) {
    if (r < 0 || r == m || c < 0 || c == n || cost[r][c] >= 0) {
        return;
    }

    cost[r][c] = level;

    // adds newly visited cell to the level
    q.offer(new int[]{r, c});

    // only one sign can be modified,
    // so just follow the sign and do not modify it
    int[] d = DIRECTIONS[grid[r][c] - 1];
    dfs(r + d[0], c + d[1]);
}
{% endhighlight %}

# Priority Queue + BFS

[Cut Off Trees for Golf Event][cut-off-trees-for-golf-event]

# Shape Transformation

[Sliding Puzzle][sliding-puzzle]

# Construction

[Smallest Greater Multiple Made of Two Digits][smallest-greater-multiple-made-of-two-digits]

# Total Distance

[Shortest Distance from All Buildings][shortest-distance-from-all-buildings]

{% highlight java %}
{% raw %}
private static final int[][] DIRECTIONS = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
{% endraw %}
public int shortestDistance(int[][] grid) {
    int min = Integer.MAX_VALUE;
    int m = grid.length, n = grid[0].length;
    int total = 0;

    // distances[i][j]: {total distances, total houses} to this empty land
    int[][][] distances = new int[m][n][2];

    // from each house to empty lands
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (grid[i][j] == 1) {
                total++;
                bfs(grid, distances, i, j);
            }
        }
    }

    // checks all empty lands with houses count == total
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (distances[i][j][1] == total) {
                min = Math.min(min, distances[i][j][0]);
            }
        }
    }

    return min == Integer.MAX_VALUE ? -1 : min;
}

private void bfs(int[][] grid, int[][][] distances, int i, int j) {
    int m = grid.length, n = grid[0].length;

    Queue<int[]> q = new LinkedList<>();
    q.offer(new int[]{ i, j });

    boolean[][] visited = new boolean[m][n];
    visited[i][j] = true;

    int steps = 0;
    while (!q.isEmpty()) {
        for (int k = q.size(); k > 0; k--) {
            int[] node = q.poll();

            if (grid[node[0]][node[1]] == 0) {
                distances[node[0]][node[1]][0] += steps;
                distances[node[0]][node[1]][1]++;
            }

            // Traverse the next cells which is not a blockage.
            for (int[] d : DIRECTIONS) {
                int r = node[0] + d[0], c = node[1] + d[1];
                if (r >= 0 && c >= 0 && r < m && c < n && !visited[r][c] && grid[r][c] == 0) {
                    visited[r][c] = true;
                    q.offer(new int[]{ r, c });
                }
            }
        }
        steps++;
    }
}
{% endhighlight %}

[cheapest-flights-within-k-stops]: https://leetcode.com/problems/cheapest-flights-within-k-stops/
[cut-off-trees-for-golf-event]: https://leetcode.com/problems/cut-off-trees-for-golf-event/
[jump-game-ii]: https://leetcode.com/problems/jump-game-ii/
[k-similar-strings]: https://leetcode.com/problems/k-similar-strings/
[map-of-highest-peak]: https://leetcode.com/problems/map-of-highest-peak/
[minimum-cost-to-make-at-least-one-valid-path-in-a-grid]: https://leetcode.com/problems/minimum-cost-to-make-at-least-one-valid-path-in-a-grid/
[minimum-jumps-to-reach-home]: https://leetcode.com/problems/minimum-jumps-to-reach-home/
[minimum-knight-moves]: https://leetcode.com/problems/minimum-knight-moves/
[minimum-moves-to-reach-target-with-rotations]: https://leetcode.com/problems/minimum-moves-to-reach-target-with-rotations/
[nested-list-weight-sum-ii]: https://leetcode.com/problems/nested-list-weight-sum-ii/
[perfect-squares]: https://leetcode.com/problems/perfect-squares/
[rotting-oranges]: https://leetcode.com/problems/rotting-oranges/
[shortest-distance-from-all-buildings]: https://leetcode.com/problems/shortest-distance-from-all-buildings/
[shortest-path-in-a-grid-with-obstacles-elimination]: https://leetcode.com/problems/shortest-path-in-a-grid-with-obstacles-elimination/
[shortest-path-to-get-all-keys]: https://leetcode.com/problems/shortest-path-to-get-all-keys/
[shortest-path-with-alternating-colors]: https://leetcode.com/problems/shortest-path-with-alternating-colors/
[sliding-puzzle]: https://leetcode.com/problems/sliding-puzzle/
[smallest-greater-multiple-made-of-two-digits]: https://leetcode.com/problems/smallest-greater-multiple-made-of-two-digits/
[the-maze]: https://leetcode.com/problems/the-maze/
[the-maze-ii]: https://leetcode.com/problems/the-maze-ii/
[trapping-rain-water-ii]: https://leetcode.com/problems/trapping-rain-water-ii/
[walls-and-gates]: https://leetcode.com/problems/walls-and-gates/
[word-ladder]: https://leetcode.com/problems/word-ladder/
