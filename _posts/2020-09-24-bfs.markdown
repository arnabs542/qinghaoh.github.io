---
layout: post
title:  "BFS"
tags: bfs
---
## Template

### Queue

[Cheapest Flights Within K Stops][cheapest-flights-within-k-stops]

{% highlight java %}
private int MAX = 100 * (100 - 1) / 2 * 10000 + 1;

public int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {
    // buils graph
    Map<Integer, List<int[]>> graph = new HashMap<>();
    for (int[] f : flights) {
        graph.computeIfAbsent(f[0], k -> new ArrayList<>()).add(new int[]{f[1], f[2]});
    }

    // BFS
    Queue<int[]> q = new LinkedList<>();
    int[] node = {src, 0};  // city, price
    q.offer(node);

    int stop = -1, min = MAX;
    while (!q.isEmpty() && stop <= K) {
        // level traversal
        for (int i = q.size(); i > 0; i--) {
            node = q.poll();

            if (node[0] == dst) {
                min = Math.min(min, node[1]);
            }

            if (stop == K || !graph.containsKey(node[0])) {
                continue;
            }

            for (int[] pair : graph.get(node[0])) {
                int neighbor = pair[0], price = pair[1];

                // pruning
                if (node[1] + price > min) {
                    continue;
                }

                // adds city:price pair.
                // some pairs may have the same city due to different paths
                q.offer(new int[]{neighbor, node[1] + price});
            }
        }

        stop++;
    }

    return min == MAX ? -1 : min;
}
{% endhighlight %}

[Minimum Knight Moves][minimum-knight-moves]

Symmetry

[Jump Game II][jump-game-ii]

{% highlight java %}
public int jump(int[] nums) {
    // implicit BFS
    int jump = 0, reach = 0, currEnd = 0;
    for (int i = 0; i < nums.length - 1; i++) {
        reach = Math.max(reach, i + nums[i]);

        // all the nodes on the current level are visited
        if (i == currEnd) {
            // increments level
            // nodes on the next level can be reached with this number of jumps
            jump++;
            // gets next level size
            currEnd = reach;
        }
    }
    return jump;
}
{% endhighlight %}

If it's not guaranteed to reach the last index:

{% highlight java %}
public int jump(int[] nums) {
    // implicit BFS
    int jumps = 0, reach = 0, currEnd = 0;
    for (int i = 0; i < nums.length; i++) {
        if (i > reach) {
            return -1;
        }

        reach = Math.max(reach, i + nums[i]);

        // all the nodes on the current level are visited
        if (i < nums.length - 1 && i == currEnd) {
            // increments level
            // nodes on the next level can be reached with this number of jumps
            jumps++;
            // gets next level size
            currEnd = reach;
        }
    }
    return jumps;
}
{% endhighlight %}

[Minimum Jumps to Reach Home][minimum-jumps-to-reach-home]

{% highlight java %}
public int minimumJumps(int[] forbidden, int a, int b, int x) {
    Set<Integer> visited = new HashSet<>();
    int furthest = x;
    for (int p : forbidden) {
        visited.add(p);  // forward
        visited.add(-p);  // backward
        furthest = Math.max(furthest, p);
    }
    furthest += a + b;

    // position, direction (0: forward, 1: backward)
    int[] node = {0, 0};
    Queue<int[]> q = new LinkedList();
    q.offer(node);
    visited.add(0);

    int jumps = 0;
    while (!q.isEmpty()) {
        for (int i = q.size(); i > 0; i--) {
            node = q.poll();
            if (node[0] == x) {
                return jumps;
            }

            int forward = node[0] + a;
            if (forward <= furthest && visited.add(forward)) {
                q.offer(new int[]{forward, 0});
            }

            int backward = node[0] - b;
            if (node[1] == 0 && backward >= 0 && visited.add(-backward)) {
                q.offer(new int[]{backward, 1});
            }
        }
        jumps++;
    }
    return -1;
}
{% endhighlight %}

[Nested List Weight Sum II][nested-list-weight-sum-ii]

{% highlight java %}
public int depthSumInverse(List<NestedInteger> nestedList) {
    Queue<NestedInteger> q = new LinkedList(nestedList);
    int runningSum = 0, sum = 0;
    while (!q.isEmpty()) {
       for (int i = q.size(); i > 0; i--) {
           NestedInteger ni = q.poll();
           if (ni.isInteger()) {
               runningSum += ni.getInteger();
           } else {
               q.addAll(ni.getList());
           }
       }
       sum += runningSum;
    }
    return sum;
}
{% endhighlight %}

[Walls and Gates][walls-and-gates]

{% highlight java %}
{% raw %}
private static final int[][] DIRECTIONS = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
{% endraw %}
public void wallsAndGates(int[][] rooms) {
    Queue<int[]> q = new LinkedList<>();
    for (int i = 0; i < rooms.length; i++) {
        for (int j = 0; j < rooms[i].length; j++) {
            if (rooms[i][j] == 0) {
                q.offer(new int[]{i, j});
            }
        }
    }

    while (!q.isEmpty()) {
        int[] p = q.poll();
        int r = p[0], c = p[1];
        for (int[] d : DIRECTIONS) {
            int i = r + d[0], j = c + d[1];
            if (i < 0 || i >= rooms.length || j < 0 || j >= rooms[i].length || rooms[i][j] != Integer.MAX_VALUE) {
                continue;
            }

            // each gate only checks the areas within 1 space
            // so whenever an empty room is reached, it must be from the closest gate
            rooms[i][j] = rooms[r][c] + 1;
            q.offer(new int[] {i, j});
        }
    }
}
{% endhighlight %}

[The Maze][the-maze]

{% highlight java %}
{% raw %}
private static final int[][] DIRECTIONS = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
{% endraw %}
public boolean hasPath(int[][] maze, int[] start, int[] destination) {
    Queue<int[]> q = new LinkedList<>();
    q.offer(start);

    boolean[][] visited = new boolean[maze.length][maze[0].length];
    visited[start[0]][start[1]] = true;

    while (!q.isEmpty()) {
        int[] p = q.poll();
        if (p[0] == destination[0] && p[1] == destination[1]) {
            return true;
        }

        for (int[] d: DIRECTIONS) {
            int r = p[0] + d[0], c = p[1] + d[1];
            // stops rolling until hitting a wall 
            while (r >= 0 && c >= 0 && r < maze.length && c < maze[0].length && maze[r][c] == 0) {
                r += d[0];
                c += d[1];
            }

            r -= d[0];
            c -= d[1];
            if (!visited[r][c]) {
                q.offer(new int[]{r, c});
                visited[r][c] = true;
            }
        }
    }
    return false;
}
{% endhighlight %}

[The Maze II][the-maze-ii]

{% highlight java %}
boolean[][] visited -> int[][] distance
{% endhighlight %}

# In-place BFS

[Rotting Oranges][rotting-oranges]

{% highlight java %}
{% raw %}
private static final int[][] DIRECTIONS = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
{% endraw %}
public int orangesRotting(int[][] grid) {
    int fresh = 0, time = 0;
    for (int i = 0; i < grid.length; i++) {
        for (int j = 0; j < grid[i].length; j++) {
            if (grid[i][j] == 1) {
                fresh++;
            }
        }
    }

    int prev = fresh;
    while (fresh > 0) {
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                // oranges that got rotten yesterday
                if (grid[i][j] == time + 2) {
                    for (int[] d : DIRECTIONS) {
                        fresh -= rot(grid, i + d[0], j + d[1], time);
                    }
                }
            }
        }

        if (fresh == prev) {
            return -1;
        }

        time++;
        prev = fresh;
    }

    return time;
}

private int rot(int[][] grid, int i, int j, int time) {
    if (i < 0 || i >= grid.length || j < 0 || j >= grid[i].length || grid[i][j] != 1) {
        return 0;
    }

    grid[i][j] = time + 3;
    return 1;
}
{% endhighlight %}

[cheapest-flights-within-k-stops]: https://leetcode.com/problems/cheapest-flights-within-k-stops/
[jump-game-ii]: https://leetcode.com/problems/jump-game-ii/
[minimum-jumps-to-reach-home]: https://leetcode.com/problems/minimum-jumps-to-reach-home/
[minimum-knight-moves]: https://leetcode.com/problems/minimum-knight-moves/
[nested-list-weight-sum-ii]: https://leetcode.com/problems/nested-list-weight-sum-ii/
[rotting-oranges]: https://leetcode.com/problems/rotting-oranges/
[the-maze]: https://leetcode.com/problems/the-maze/
[the-maze-ii]: https://leetcode.com/problems/the-maze-ii/
[walls-and-gates]: https://leetcode.com/problems/walls-and-gates/
