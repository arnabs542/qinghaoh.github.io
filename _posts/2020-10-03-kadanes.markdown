---
layout: post
title:  "Kadane's Algorithm"
tag: subarray
---
[Kadane's algorithm](https://en.wikipedia.org/wiki/Maximum_subarray_problem#Kadane's_algorithm)

*Maximum subarray problem*

[Maximum Subarray][maximum-subarray]

{% highlight java %}
public int maxSubArray(int[] nums) {
    int max = nums[0], currSum = nums[0];
    for (int i = 1; i < nums.length; i++) {
        // currSum is the max sum ending at num
        currSum = nums[i] + Math.max(currSum, 0);
        max = Math.max(max, currSum);
    }
    return max;
}
{% endhighlight %}

This can be viewed as a simple/trivial example of dynamic programming.

[Maximum Alternating Subarray Sum][maximum-alternating-subarray-sum]

{% highlight java %}
public long maximumAlternatingSubarraySum(int[] nums) {
    long max = nums[0], neg = 0, pos = nums[0];
    for (int i = 1; i < nums.length; i++) {
        long tmp = neg;
        neg = pos - nums[i];
        pos = Math.max(0, tmp) + nums[i];
        max = Math.max(max, Math.max(neg, pos));
    }
    return max;
}
{% endhighlight %}

[Maximum Subarray Sum After One Operation][maximum-subarray-sum-after-one-operation]

{% highlight java %}
public int maxSumAfterOperation(int[] nums) {
    int n = nums.length;
    int[][] dp = new int[n + 1][2];
    int max = 0;
    for (int i = 0; i < n; i++) {
        dp[i + 1][0] = nums[i] + Math.max(dp[i][0], 0);
        dp[i + 1][1] = Math.max(dp[i][0] + nums[i] * nums[i], dp[i][1] + nums[i]);
        dp[i + 1][1] = Math.max(dp[i + 1][1], nums[i] * nums[i]);
        max = Math.max(max, dp[i + 1][1]);
    }
    return max;
}
{% endhighlight %}

Reduced to 1D:

{% highlight java %}
public int maxSumAfterOperation(int[] nums) {
    int op = 0, noop = 0, max = 0;
    for (int num : nums) {
        op = Math.max(num * num, Math.max(noop + num * num, op + num));
        noop = num + Math.max(noop, 0);
        max = Math.max(max, op);
    }
    return max;
}
{% endhighlight %}

[Maximum Subarray Sum with One Deletion][maximum-subarray-sum-with-one-deletion]

{% highlight java %}
public int maximumSum(int[] arr) {
    int n = arr.length;
    int oneDelete = 0, noDelete = arr[0], max = arr[0];
    for (int i = 1; i < n; i++) {
        oneDelete = Math.max(oneDelete + arr[i], noDelete);
        noDelete = Math.max(noDelete + arr[i], arr[i]);
        max = Math.max(max, Math.max(oneDelete, noDelete));
    }
    return max;
}
{% endhighlight %}

[Best Time to Buy and Sell Stock][best-time-to-buy-and-sell-stock]

{% highlight java %}
public int maxProfit(int[] prices) {
    int max = 0, curr = 0;
    for(int i = 1; i < prices.length; i++) {
        curr = Math.max(0, curr += prices[i] - prices[i-1]);
        max = Math.max(curr, max);
    }
    return max;
}
{% endhighlight %}

{% highlight java %}
public int maxProfit(int[] prices) {
    int minPrice = Integer.MAX_VALUE, profit = 0;
    for (int p : prices) {
        minPrice = Math.min(p, minPrice);
        profit = Math.max(profit, p - minPrice);
    }
    return profit;
}
{% endhighlight %}

[Best Sightseeing Pair][best-sightseeing-pair]

{% highlight java %}
public int maxScoreSightseeingPair(int[] A) {
    int max = 0, curr = 0;
    for (int i = 0; i < A.length; i++) {
        max = Math.max(max, curr + A[i] - i);
        curr = Math.max(curr, A[i] + i);
    }
    return max;
}
{% endhighlight %}

{% highlight java %}
public int maxScoreSightseeingPair(int[] A) {
    int max = 0, curr = 0;
    for (int a : A) {
        max = Math.max(max, curr + a);
        // curr is the best score so far
        // all spots by far are 1 distance further
        curr = Math.max(curr, a) - 1;
    }
    return max;
}
{% endhighlight %}

[Number of Subarrays with Bounded Maximum][number-of-subarrays-with-bounded-maximum]

{% highlight java %}
public int numSubarrayBoundedMax(int[] nums, int left, int right) {
    int count = 0;
    int dp = 0;  // number of valid subarrays ending at nums[i]
    int prev = -1;  // index of the last num which is > right
    for (int i = 0; i < nums.length; i++) {
        if (nums[i] > right) {
            dp = 0;
            prev = i;
        } else if (nums[i] >= left) {
            // all nums in (prev, i] is in range
            dp = i - prev;
        }

        // if nums[i] < left, appends it to the current dp array,
        // and it won't change the max of the dp array
        // so dp[i] == dp[i - 1] (nums[]i] itself is out of range)
        count += dp;
    }
    return count;
}
{% endhighlight %}

# 2D

[Max Dot Product of Two Subsequences][max-dot-product-of-two-subsequences]

{% highlight java %}
private static final int MIN_DOT_PRODUCT = -(int)5e8;

public int maxDotProduct(int[] nums1, int[] nums2) {
    int n1 = nums1.length, n2 = nums2.length;
    int[][] dp = new int[n1 + 1][n2 + 1];
    for (int i = 0; i <= n1; i++) {
        Arrays.fill(dp[i], MIN_DOT_PRODUCT);
    }

    for (int i = 1; i <= n1; i++) {
        for (int j = 1; j <= n2; j++) {
            dp[i][j] = Math.max(nums1[i - 1] * nums2[j - 1],
                                Math.max(dp[i - 1][j - 1] + nums1[i - 1] * nums2[j - 1],
                                         Math.max(dp[i - 1][j], dp[i][j - 1])));
        }
    }
    return dp[n1][n2];
}
{% endhighlight %}

# Cumulative

[Reducing Dishes][reducing-dishes]

{% highlight java %}
public int maxSatisfaction(int[] satisfaction) {
    Arrays.sort(satisfaction);

    int max = 0, total = 0;
    for (int i = satisfaction.length - 1; i >= 0 && satisfaction[i] > -total; i--) {
        // cumulative
        max += total += satisfaction[i];
    }
    return max;
}
{% endhighlight %}

[best-sightseeing-pair]: https://leetcode.com/problems/best-sightseeing-pair/
[best-time-to-buy-and-sell-stock]: https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
[max-dot-product-of-two-subsequences]: https://leetcode.com/problems/max-dot-product-of-two-subsequences/
[maximum-alternating-subarray-sum]: https://leetcode.com/problems/maximum-alternating-subarray-sum/
[maximum-subarray]: https://leetcode.com/problems/maximum-subarray/
[maximum-subarray-sum-after-one-operation]: https://leetcode.com/problems/maximum-subarray-sum-after-one-operation/
[maximum-subarray-sum-with-one-deletion]: https://leetcode.com/problems/maximum-subarray-sum-with-one-deletion/
[number-of-subarrays-with-bounded-maximum]: https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum/
[reducing-dishes]: https://leetcode.com/problems/reducing-dishes/
