---
layout: post
title:  "Trie"
tag: trie
---
[Trie](https://en.wikipedia.org/wiki/Trie)

[Index Pairs of a String][index-pairs-of-a-string]

{% highlight java %}
public int[][] indexPairs(String text, String[] words) {
    TrieNode root = new TrieNode();
    for (String w : words) {
        insert(root, w);
    }

    List<int[]> list = new ArrayList<>();
    for (int i = 0; i < text.length(); ++i) {
        TrieNode node = root;
        for (int j = i; j < text.length(); j++) {
            node = node.children[text.charAt(j) - 'a'];
            if (node == null) {
                break;
            }
            if (node.end) {
                list.add(new int[]{i, j});
            }
        }
    }

    int[][] result = new int[list.size()][2];
    for (int i = 0; i < result.length; ++i) {
        result[i] = list.get(i);
    }
    return result;
}

class TrieNode {
    TrieNode[] children;
    boolean end;

    TrieNode() {
        end = false;
        children = new TrieNode[26];
    }
}

private void insert(TrieNode root, String word) {        
    TrieNode node = root;
    for (char c : word.toCharArray()) {
        if (node.children[c - 'a'] == null) {
            node.children[c - 'a'] = new TrieNode();
        }
        node = node.children[c - 'a'];
    }
    node.end = true;
}
{% endhighlight %}

[Prefix and Suffix Search][prefix-and-suffix-search]

{% highlight java %}
private TrieNode root = new TrieNode();

public WordFilter(String[] words) {
    for (int i = 0; i < words.length; i++) {
        String w = words[i];
        for (int j = w.length(); j >= 0; j--) {
            // '{' - 'a' == 27
            insert(root, w.substring(j) + "{" + w, i);
        }
    }
}

public int f(String prefix, String suffix) {
    String s = suffix + "{" + prefix;
    TrieNode node = root;
    for (char c : s.toCharArray()) {
        if (node.children[c - 'a'] == null) {
            return -1;
        }
        node = node.children[c - 'a'];
    }
    return node.index;
}

class TrieNode {
    TrieNode[] children;
    int index;  // index in the dictionary. Larger index will overwrite old ones.

    TrieNode() {
        children = new TrieNode[27];
        index = 0;
    }
}

private void insert(TrieNode root, String word, int index) {
    TrieNode node = root;
    for (char c: word.toCharArray()) {
        if (node.children[c - 'a'] == null) {
            node.children[c - 'a'] = new TrieNode();
        }
        node = node.children[c - 'a'];
        node.index = index;
    }
}
{% endhighlight %}

[Implement Trie II (Prefix Tree)][implement-trie-ii-prefix-tree]

{% highlight java %}
class TrieNode {
    TrieNode[] children;
    int prefixCount;
    int wordCount;

    TrieNode() {
        children = new TrieNode[26];
        prefixCount = -1;
        wordCount = -1;
    }
}
{% endhighlight %}

# Prefix Sum

[Map Sum Pairs][map-sum-pairs]

{% highlight java %}
// key : val
private Map<String, Integer> map = new HashMap<>();
private TrieNode root = new TrieNode();

/** Initialize your data structure here. */
public MapSum() {

}

public void insert(String key, int val) {
    int delta = val - map.getOrDefault(key, 0);
    map.put(key, val);

    TrieNode node = root;
    node.sum += delta;
    for (char c: key.toCharArray()) {
        node.children.putIfAbsent(c, new TrieNode());
        node = node.children.get(c);
        node.sum += delta;
    }
}

public int sum(String prefix) {
    TrieNode node = root;
    for (char c: prefix.toCharArray()) {
        node = node.children.get(c);
        if (node == null) {
            return 0;
        }
    }
    return node.sum;
}

class TrieNode {
    Map<Character, TrieNode> children;
    // sum of all the pairs' value whose key starts with the prefix
    // where prefix is from root to this node
    int sum;

    TrieNode() {
        children = new HashMap();
        sum = 0;
    }
}
{% endhighlight %}

# Virtual Trie

[K-th Smallest in Lexicographical Order][k-th-smallest-in-lexicographical-order]

![Trie](/assets/k_th_smallest_in_lexicographical_order.png)

{% highlight java %}
public int findKthNumber(int n, int k) {
    int curr = 1;
    while (k > 1) {
        // counts the nodes between the current node and its next node on the same level
        int count = countNodes(n, curr, curr + 1);
        if (count < k) {
            // moves to curr + 1
            curr++;
            k -= count;
        } else {
            // the k-th integer is in the subtree of current node
            // goes to the leftmost child node
            curr *= 10;
            k--;
        }
    }
    return curr;
}

// counts the nodes in [node1, node2)
// node1 and node2 are in the same subtree and on the same level
public int countNodes(int n, long node1, long node2) {
    int count = 0;
    while (node1 <= n) {
        // if node2 > n, n is in the range [node1, node2).
        //   adds (n - node1 + 1) to the count
        // else the subtree of node1 is complete.
        //   adds (node2 - node1) to the count
        count += Math.min(n + 1, node2) - node1;

        // next level
        node1 *= 10;
        node2 *= 10;
    }
    return count;
}
{% endhighlight %}

[implement-trie-ii-prefix-tree]: https://leetcode.com/problems/implement-trie-ii-prefix-tree/
[index-pairs-of-a-string]: https://leetcode.com/problems/index-pairs-of-a-string/
[k-th-smallest-in-lexicographical-order]: https://leetcode.com/problems/k-th-smallest-in-lexicographical-order/
[map-sum-pairs]: https://leetcode.com/problems/map-sum-pairs/
[prefix-and-suffix-search]: https://leetcode.com/problems/prefix-and-suffix-search/
