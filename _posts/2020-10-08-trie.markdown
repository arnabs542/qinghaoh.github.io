---
layout: post
title:  "Trie"
tag: trie
---
[Trie](https://en.wikipedia.org/wiki/Trie)

[Index Pairs of a String][index-pairs-of-a-string]

{% highlight java %}
public int[][] indexPairs(String text, String[] words) {
    TrieNode root = new TrieNode();
    for (String w: words) {
        insert(root, w);
    }

    List<int[]> list = new ArrayList<>();
    for (int i = 0; i < text.length(); ++i) {
        TrieNode node = root;
        for (int j = i; j < text.length(); j++) {
            node = node.children[text.charAt(j) - 'a'];
            if (node == null) {
                break;
            }
            if (node.end) {
                list.add(new int[]{i, j});
            }
        }
    }

    int[][] result = new int[list.size()][2];
    for (int i = 0; i < result.length; ++i) {
        result[i] = list.get(i);
    }
    return result;
}

class TrieNode {
    TrieNode[] children;
    boolean end;

    TrieNode() {
        end = false;
        children = new TrieNode[26];
    }
}

private void insert(TrieNode root, String word) {        
    TrieNode node = root;
    for (char c: word.toCharArray()) {
        if (node.children[c - 'a'] == null) {
            node.children[c - 'a'] = new TrieNode();
        }
        node = node.children[c - 'a'];
    }
    node.end = true;
}
{% endhighlight %}

[Prefix and Suffix Search][prefix-and-suffix-search]

{% highlight java %}
private TrieNode root = new TrieNode();

public WordFilter(String[] words) {
    for (int i = 0; i < words.length; i++) {
        String w = words[i];
        for (int j = w.length(); j >= 0; j--) {
            // '{' - 'a' == 27
            insert(root, w.substring(j) + "{" + w, i);
        }
    }
}

public int f(String prefix, String suffix) {
    String s = suffix + "{" + prefix;
    TrieNode node = root;
    for (char c : s.toCharArray()) {
        if (node.children[c - 'a'] == null) {
            return -1;
        }
        node = node.children[c - 'a'];
    }
    return node.index;
}

class TrieNode {
    TrieNode[] children;
    int index;  // index in the dictionary. Larger index will overwrite old ones.

    TrieNode() {
        children = new TrieNode[27];
        index = 0;
    }
}

private void insert(TrieNode root, String word, int index) {
    TrieNode node = root;
    for (char c: word.toCharArray()) {
        if (node.children[c - 'a'] == null) {
            node.children[c - 'a'] = new TrieNode();
        }
        node = node.children[c - 'a'];
        node.index = index;
    }
}
{% endhighlight %}

[index-pairs-of-a-string]: https://leetcode.com/problems/index-pairs-of-a-string/
[prefix-and-suffix-search]: https://leetcode.com/problems/prefix-and-suffix-search/
