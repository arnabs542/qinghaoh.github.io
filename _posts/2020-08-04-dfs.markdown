---
layout: post
title:  "DFS"
tags: dfs
---
## Template
[Keys and Rooms][keys-and-rooms]

### Recursion

{% highlight java %}
private Set<Integer> set = new HashSet<>();

public boolean canVisitAllRooms(List<List<Integer>> rooms) {
    dfs(rooms, 0);
    return set.size() == rooms.size();
}

private void dfs(List<List<Integer>> rooms, int room) {
    if (set.contains(room)) {
        return;
    }

    set.add(room);
    for (int key : rooms.get(room)) {
        dfs(rooms, key);
    }
}
{% endhighlight %}

### Stack

{% highlight java %}
public boolean canVisitAllRooms(List<List<Integer>> rooms) {
    Set<Integer> set = new HashSet<>();
    set.add(0);

    Deque<Integer> st = new ArrayDeque();
    st.push(0);

    while (!st.isEmpty()) {
        int room = st.pop();
        for (int key: rooms.get(room)) {
            if (!set.contains(key)) {
                set.add(key);
                st.push(key);
            }
        }
    }

    return set.size() == rooms.size();
}
{% endhighlight %}

[keys-and-rooms]: https://leetcode.com/problems/keys-and-rooms/
