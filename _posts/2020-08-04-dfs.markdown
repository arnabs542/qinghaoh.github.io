---
layout: post
title:  "DFS"
tags: dfs
---
## Template
[Keys and Rooms][keys-and-rooms]

### Recursion

{% highlight java %}
private Set<Integer> set = new HashSet<>();

public boolean canVisitAllRooms(List<List<Integer>> rooms) {
    dfs(rooms, 0);
    return set.size() == rooms.size();
}

private void dfs(List<List<Integer>> rooms, int room) {
    if (set.contains(room)) {
        return;
    }

    set.add(room);
    for (int key : rooms.get(room)) {
        dfs(rooms, key);
    }
}
{% endhighlight %}

### Stack

{% highlight java %}
public boolean canVisitAllRooms(List<List<Integer>> rooms) {
    Set<Integer> set = new HashSet<>();
    set.add(0);

    Deque<Integer> st = new ArrayDeque();
    st.push(0);

    while (!st.isEmpty()) {
        int room = st.pop();
        for (int key: rooms.get(room)) {
            if (!set.contains(key)) {
                set.add(key);
                st.push(key);
            }
        }
    }

    return set.size() == rooms.size();
}
{% endhighlight %}

[Pyramid Transition Matrix][pyramid-transition-matrix]

{% highlight java %}
private Map<String, Set<Character>> map;

public boolean pyramidTransition(String bottom, List<String> allowed) {
    map = new HashMap<>();
    for (String s : allowed) {
        map.computeIfAbsent(s.substring(0, 2), k -> new HashSet<>()).add(s.charAt(2));
    }

    return dfs(bottom, "", 1);
}

private boolean dfs(String row, String nextRow, int index) {
    if (row.length() == 1) {
        return true;
    }

    if (nextRow.length() + 1 == row.length()) {
        return dfs(nextRow, "", 1);
    }

    String key = row.substring(index - 1, index + 1);
    if (map.containsKey(key)) {
        for (Character c : map.get(key)) {
            if (dfs(row, nextRow + c, index + 1)) {
                return true;
            }
        }
    }

    return false;
}
{% endhighlight %}

### Bottom-up

[Time Needed to Inform All Employees][time-needed-to-inform-all-employees]

{% highlight java %}
public int numOfMinutes(int n, int headID, int[] manager, int[] informTime) {
    int minutes = 0;
    for (int i = 0; i < n; i++) {
        minutes = Math.max(minutes, dfs(i, manager, informTime));
    }
    return minutes;
}

// bottom-up
public int dfs(int i, int[] manager, int[] informTime) {
    if (manager[i] != -1) {
        informTime[i] += dfs(manager[i], manager, informTime);
        // don't visit his manager twice
        manager[i] = -1;
    }
    return informTime[i];
}
{% endhighlight %}

[Clone Graph][clone-graph]

{% highlight java %}
private Map<Integer, Node> map = new HashMap<>();

public Node cloneGraph(Node node) {
    return dfs(node);
}

private Node dfs(Node node) {
    if (node == null) {
        return null;
    }

    if (map.containsKey(node.val)) {
        return map.get(node.val);
    }

    Node copy = new Node(node.val, new ArrayList<>());
    map.put(copy.val, copy);
    for (Node n : node.neighbors) {
        copy.neighbors.add(dfs(n));
    }
    return copy;
}
{% endhighlight %}

# Brute Force

[Lexicographically Smallest String After Applying Operations][lexicographically-smallest-string-after-applying-operations]

{% highlight java %}
private String min;
private int a, b;
private Set<String> visited = new HashSet<>();

public String findLexSmallestString(String s, int a, int b) {
    this.min = s;
    this.a = a;
    this.b = b;

    dfs(s);
    return min;
}

private void dfs(String s) {
    if (!visited.add(s)) {
        return;
    }

    if (min.compareTo(s) > 0) {
        min = s;
    }

    dfs(add(s));
    dfs(rotate(s));
}

private String add(String s) {
    char[] c = s.toCharArray();
    for (int i = 1; i < c.length; i += 2) {
        c[i] = (char)((c[i] - '0' + a) % 10 + '0');
    }
    return new String(c);
}

privat String rotate(String s) {
    int n = s.length();
    return s.substring(n - b) + s.substring(0, n - b);
}
{% endhighlight %}

This solution includes all possibilities, and uses a set as termination condition.

[clone-graph]: https://leetcode.com/problems/clone-graph/
[keys-and-rooms]: https://leetcode.com/problems/keys-and-rooms/
[lexicographically-smallest-string-after-applying-operations]: https://leetcode.com/problems/lexicographically-smallest-string-after-applying-operations/
[pyramid-transition-matrix]: https://leetcode.com/problems/pyramid-transition-matrix/
[time-needed-to-inform-all-employees]: https://leetcode.com/problems/time-needed-to-inform-all-employees/
