---
layout: post
title:  "K Sum"
tag: array
---

[K-SUM](https://en.wikipedia.org/wiki/3SUM)

# 2 Sum

[Two Sum][two-sum]

One pass, Set (Map): `O(n)`

[Two Sum II - Input array is sorted][two-sum-ii-input-array-is-sorted]

Two pointers: `O(n)`

[Two Sum Less Than K][two-sum-less-than-k]

# 3 Sum

[3Sum][3sum]

Sort + O(n) * Two pointers: `O(n ^ 2)`

[3Sum Smaller][3sum-smaller]

[3Sum Closest][3sum-closest]

Two pointers

[3Sum With Multiplicity][3sum-with-multiplicity]

{% highlight java %}
private static final int MOD = (int)1e9 + 7;

public int threeSumMulti(int[] arr, int target) {
    long[] c = new long[101];
    for (int a : arr) {
        c[a]++;
    }

    long num = 0;
    for (int i = 0; i < c.length; i++) {
        for (int j = i; j < c.length; j++) {
            int k = target - i - j;
            if (k >= c.length || k < 0) {
                continue;
            }

            if (i == j && j == k) {
                num += c[i] * (c[i] - 1) * (c[i] - 2) / 6;
            } else if (i == j && j != k) {
                num += c[i] * (c[i] - 1) / 2 * c[k];
            } else if (j < k) {
                num += c[i] * c[j] * c[k];
            }
        }
    }
    return (int)(num % MOD);
}
{% endhighlight %}

[Valid Triangle Number][valid-triangle-number]

# K Sum

`O(n ^ (k - 1))`

* Sort + O(n ^ (k - 2)) * Two pointers
* O(n ^ (k - 2)) * Set/Map

{% highlight java %}
public List<List<Integer>> kSum(int[] nums, int target, int start, int k) {
    int n = nums.length;
    List<List<Integer>> list = new ArrayList<>();
    if (start == n || nums[start] * k > target || target > nums[n - 1] * k) {
        return list;
    }

    if (k == 2) {
        return twoSum(nums, target, start);
    }

    for (int i = start; i < n; i++) {
        if (i == start || nums[i - 1] != nums[i]) {
            for (var set : kSum(nums, target - nums[i], i + 1, k - 1)) {
                list.add(new ArrayList<>(Arrays.asList(nums[i])));
                list.get(list.size() - 1).addAll(set);
            }
        }
    }

    return list;
}
{% endhighlight %}

[4Sum II][4sum-ii]

`O(n ^ 2)`

{% highlight java %}
public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {
    Map<Integer, Integer> map = new HashMap<>();
    for (int c : C) {
        for (int d : D) {
            map.compute(c + d, (k, v) -> v == null ? 1 : v + 1);
        }
    }

    int count = 0;
    for (int a : A) {
        for (int b : B) {
            count += map.getOrDefault(-a - b, 0);
        }
    }
    return count;
}
{% endhighlight %}

[Split Array with Equal Sum][split-array-with-equal-sum]

`O(n ^ 2)`:

(0, i), (i, j) + Set; (j, k), (k, n)

[3sum]: https://leetcode.com/problems/3sum/
[3sum-closest]: https://leetcode.com/problems/3sum-closest/
[3sum-smaller]: https://leetcode.com/problems/3sum-smaller/
[3sum-with-multiplicity]: https://leetcode.com/problems/3sum-with-multiplicity/
[4sum-ii]: https://leetcode.com/problems/4sum-ii/
[split-array-with-equal-sum]: https://leetcode.com/problems/split-array-with-equal-sum/
[two-sum]: https://leetcode.com/problems/two-sum/
[two-sum-ii-input-array-is-sorted]: https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/
[two-sum-less-than-k]: https://leetcode.com/problems/two-sum-less-than-k/
[valid-triangle-number]: https://leetcode.com/problems/valid-triangle-number/
