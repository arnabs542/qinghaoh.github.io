---
layout: post
title:  "Graph"
tags: graph
usemathjax: true
---
# Connectivity

## Bridge

[Bridge](https://en.wikipedia.org/wiki/Bridge_%28graph_theory%29): In graph theory, a bridge, isthmus, cut-edge, or cut arc is an edge of a graph whose deletion increases the graph's number of connected components.

Equivalently, an edge is a bridge iff it is not contained in any cycle.

### Tarjan's bridge-finding algorithm

Linear time.

[Critical Connections in a Network][critical-connections-in-a-network]

{% highlight java %}
private List<List<Integer>> graph;
private List<List<Integer>> bridges = new ArrayList<>();
private int time = 0;

// Tarjan's Algorithm
public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {        
    this.graph = new ArrayList<>(n);
    for (int i = 0; i < n; i++) {
        graph.add(new ArrayList<>());
    }

    for (List<Integer> e : connections) {
        int s1 = e.get(0), s2 = e.get(1);
        graph.get(s1).add(s2);
        graph.get(s2).add(s1);
    }

    int[] dfn = new int[n];  // dfn[u]: the sequence number (timestamp) when node u is visited
    int[] low = new int[n];  // low[u]: the timestamp of the earliest nodes in the stack to which the subtree of node u or node u can be traced (back edge)

    dfs(dfn, low, 0, -1);
    return bridges;
}

// preorder
private void dfs(int[] dfn, int[] low, int node, int parent) {
    if (dfn[node] > 0) {
        return;
    }

    dfn[node] = low[node] = ++time;

    for (int neighbor : graph.get(node)) {
        if (neighbor == parent) {
            continue;
        }

        // unvisited
        if (dfn[neighbor] == 0) {
            dfs(dfn, low, neighbor, node);
        }

        low[node] = Math.min(low[node], low[neighbor]);

        // no back edge; critical
        if (low[neighbor] > dfn[node]) {
            bridges.add(Arrays.asList(node, neighbor));
        }
    }
}
{% endhighlight %}

![Example](https://assets.leetcode.com/uploads/2019/09/03/1537_ex1_2.png) 

```
node: 0
parent: -1
dfn: 1,0,0,0
low: 1,0,0,0

node: 1
parent: 0
dfn: 1,2,0,0
low: 1,2,0,0

node: 2
parent: 1
dfn: 1,2,3,0
low: 1,2,3,0

After DFS:
node: 2
parent: 1
dfn: 1,2,3,0
low: 1,2,1,0

node: 3
parent: 1
dfn: 1,2,3,4
low: 1,1,1,4

After DFS:
node: 3
parent: 1
dfn: 1,2,3,4
low: 1,1,1,4

After DFS:
node: 1
parent: 0
dfn: 1,2,3,4
low: 1,1,1,4

After DFS:
node: 0
parent: -1
dfn: 1,2,3,4
low: 1,1,1,4
```
# Travelling Salesman Problem

[Travelling salesman problem (TSP)](https://en.wikipedia.org/wiki/Travelling_salesman_problem): "Given a list of cities and the distances between each pair of cities, what is the shortest possible route that visits each city exactly once and returns to the origin city?" It is an *** NP-hard *** problem.

[Held-Karp algorithm](https://en.wikipedia.org/wiki/Held%E2%80%93Karp_algorithm)

Complexity:

* Time: `O(n ^ 2 * 2 ^ n)`

[Find the Shortest Superstring][find-the-shortest-superstring]

{% highlight java %}
public String shortestSuperstring(String[] words) {
    int n = words.length;

    // TSP: NP-hard
    // graph[i][j]: length of string to append when A[i] is followed by A[j]
    int[][] graph = new int[n][n];
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            graph[i][j] = getDistance(words[i], words[j]);
            graph[j][i] = getDistance(words[j], words[i]);
        }
    }

    // Heldâ€“Karp algorithm
    // dp[i][j]: min length
    // path[i][j]: the node before j
    //  - i: bit mask, subset
    //  - j: last node travelled
    int[][] dp = new int[1 << n][n], path = new int[1 << n][n];
    int last = -1, min = Integer.MAX_VALUE;

    // iterates all combinations/subsets of the nodes
    for (int i = 1; i < (1 << n); i++) {
        Arrays.fill(dp[i], Integer.MAX_VALUE);

        // for each node
        for (int j = 0; j < n; j++) {
            // if the node (j) is in the subset
            if ((i & (1 << j)) > 0) {
                // the subset without the node (j)
                int prev = i - (1 << j);

                // if the node (j) is the only node in subset
                if (prev == 0) {
                    dp[i][j] = words[j].length();
                } else {
                    // for all the possible nodes before the node (j)
                    for (int k = 0; k < n; k++) {
                        // if k is valid and the length could be reduced
                        if (dp[prev][k] < Integer.MAX_VALUE && dp[prev][k] + graph[k][j] < dp[i][j]) {
                            dp[i][j] = dp[prev][k] + graph[k][j];
                            path[i][j] = k;
                        }
                    }
                }
            }

            // subset contains all nodes
            if (i == (1 << n) - 1 && dp[i][j] < min) {
                min = dp[i][j];
                last = j;
            }
        }
    }

    // restores the path
    StringBuilder sb = new StringBuilder();
    int set = (1 << n) - 1;
    Deque<Integer> st = new ArrayDeque<>();
    while (set > 0) {
        st.push(last);
        int tmp = set;
        set -= (1 << last);
        last = path[tmp][last];
    }

    // constructs the result
    int i = st.pop();
    sb.append(words[i]);
    while (!st.isEmpty()) {
        int j = st.pop();
        sb.append(words[j].substring(words[j].length() - graph[i][j]));
        i = j;
    }
    return sb.toString();
}

private int getDistance(String a, String b) {
    // no string in words is a substirng of another string in words
    for (int i = 1; i < a.length(); i++) {
        if (b.startsWith(a.substring(i))) {
            return b.length() - a.length() + i;
        }
    }
    return b.length();
}
{% endhighlight %}

# Directed Graph

[Directed graph](https://en.wikipedia.org/wiki/Directed_graph)

## Degree
[Find the Town Judge][find-the-town-judge]

{% highlight java %}
public int findJudge(int N, int[][] trust) {
    int[] degree = new int[N];
    for (int[] t : trust) {
        degree[t[0] - 1]--;
        degree[t[1] - 1]++;
    }

    for (int i = 0; i < N; i++) {
        if (degree[i] == N - 1) {
            return i + 1;
        }
    }
    return -1;
}
{% endhighlight %}

[Find the Celebrity][find-the-celebrity]

{% highlight java %}
public int findCelebrity(int n) {
    // finds the only candidate if it exists
    int candidate = 0;
    for (int i = 1; i < n; i++) {
        if (knows(candidate, i)) {
            candidate = i;
        }
    }

    for (int i = 0; i < n; i++) {
        // knows(candidate, i) is already checked in the first pass
        if ((i < candidate && (knows(candidate, i) || !knows(i, candidate))) ||
            (i > candidate && !knows(i, candidate))) {
            return -1;
        }
    }
    return candidate;
}
{% endhighlight %}

[Evaluate Division][evaluate-division]

{% highlight java %}
private Map<String, Map<String, Double>> graph = new HashMap<>();

public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
    buildGraph(equations, values);

    double[] result = new double[queries.size()];
    for (int i = 0; i < queries.size(); i++) {
        List<String> q = queries.get(i);
        result[i] = getPathWeight(q.get(0), q.get(1), new HashSet<>());
    }
    return result;
}

private double getPathWeight(String start, String end, Set<String> visited) {
    if (!graph.containsKey(start)) {
        return -1.0;
    }

    if (graph.get(start).containsKey(end)) {
        return graph.get(start).get(end);
    }

    // dfs
    visited.add(start);
    for (Map.Entry<String, Double> neighbour : graph.get(start).entrySet()) {
        if (!visited.contains(neighbour.getKey())) {
            double productWeight = getPathWeight(neighbour.getKey(), end, visited);
            if (productWeight != -1.0) {
                return neighbour.getValue() * productWeight;
            }
        }
    }

    return -1.0;
}

// A / B = k
// A : (B : k)
// B : (A : 1 / k)
private void buildGraph(List<List<String>> equations, double[] values) {
    for (int i = 0; i < equations.size(); i++) {
        List<String> e = equations.get(i);

        graph.putIfAbsent(e.get(0), new HashMap<>());
        graph.get(e.get(0)).put(e.get(1), values[i]);

        graph.putIfAbsent(e.get(1), new HashMap<>());
        graph.get(e.get(1)).put(e.get(0), 1 / values[i]);
    }
}
{% endhighlight %}

## Adjacency Matrix

Raising an adjacency matrix $$ A $$ of simple graph $$ G $$ to the $$ n $$-th power gives the number of $$ n $$-length **walks** between two vertices $$ v_i $$, $$ v_j $$ of $$ G $$ in the resulting matrix.

* A walk is a finite or infinite sequence of edges which joins a sequence of vertices.
* A trail is a walk in which all edges are distinct.
* A path is a trail in which all vertices (and therefore also all edges) are distinct.

[Knight Dialer][knight-dialer]

{% highlight java %}
private static final int MOD = (int)1e9 + 7;

public int knightDialer(int n) {
    if (n == 1) {
        return 10;
    }

    // adjacent matrix
    long[][] matrix = {
        {0, 0, 0, 0, 1, 0, 1, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 1, 0, 1, 0},
        {0, 0, 0, 0, 0, 0, 0, 1, 0, 1},
        {0, 0, 0, 0, 1, 0, 0, 0, 1, 0},
        {1, 0, 0, 1, 0, 0, 0, 0, 0, 1},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {1, 1, 0, 0, 0, 0, 0, 1, 0, 0},
        {0, 0, 1, 0, 0, 0, 1, 0, 0, 0},
        {0, 1, 0, 1, 0, 0, 0, 0, 0, 0},
        {0, 0, 1, 0, 1, 0, 0, 0, 0, 0},
    };

    long[][] pow = new long[10][10];
    // identity matrix
    for (int i = 0; i < pow.length; i++) {
        pow[i][i] = 1;
    }

    // 50. Pow(x, n)
    n--;
    while (n > 0) {
        if (n % 2 == 1) {
            pow = multiply(pow, matrix);
        }
        matrix = multiply(matrix, matrix);
        n /= 2;
    }

    long sum = 0;
    for (int i = 0; i < pow.length; i++) {
        for (int j = 0; j < pow[0].length; j++) {
            sum = (sum + pow[i][j]) % MOD;
        }
    }
    return (int)sum;
}

private long[][] multiply(long[][] m1, long[][] m2) {
    int m = m1.length, l = m1[0].length, n = m2[0].length;
    long[][] result = new long[10][10];
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            for (int k = 0; k < l; k++) {
                result[i][j] = (result[i][j] + m1[i][k] * m2[k][j]) % MOD;
            }
        }
    }
    return result;
}
{% endhighlight %}

# Undirected Graph

[Graph Valid Tree][graph-valid-tree]

{% highlight java %}
private List<Set<Integer>> graph;
private Set<Integer> visited;

public boolean validTree(int n, int[][] edges) {
    if (n != edges.length + 1) {
        return false;
    }

    this.graph = new ArrayList<>();
    for (int i = 0; i < n; i++) {
        graph.add(new HashSet<>());
    }
    for (int[] e : edges) {
        graph.get(e[0]).add(e[1]);
        graph.get(e[1]).add(e[0]);
    }

    // checks if the graph is fully connected
    this.visited = new HashSet<>();
    dfs(0);

    return visited.size() == n;
}

private void dfs(int node) {
    if (visited.contains(node)) {
        return;
    }

    visited.add(node);
    for (int neighbor : graph.get(node)) {
        dfs(neighbor);
    }
}
{% endhighlight %}

Another solution is by disjoint set.

# Bipartite

[Is Graph Bipartite][is-graph-bipartite]

{% highlight java %}
public boolean isBipartite(int[][] graph) {
    int[] colors = new int[graph.length];
    // checks all unvisited vertex since the graph might be disconnected
    for (int i = 0; i < graph.length; i++) {
        if (colors[i] == 0 && !dfs(graph, colors, i, 1)) {
            return false;
        }
    }
    return true;
}

private boolean dfs(int[][] graph, int[] colors, int index, int color) {
    if (colors[index] != 0) {
        return colors[index] == color;
    }

    colors[index] = color;
    for (int neighbor : graph[index]) {
        if (!dfs(graph, colors, neighbor, -color)) {
            return false;
        }
    }
    return true;
}
{% endhighlight %}

# Eulerian Path

[Eulerian path](https://en.wikipedia.org/wiki/Eulerian_path): In graph theory, an **Eulerian trail** (or **Eulerian path**) is a trail in a finite graph that visits every edge exactly once (allowing for revisiting vertices). Similarly, an **Eulerian circuit** or **Eulerian cycle** is an Eulerian trail that starts and ends on the same vertex.

**Euler's Theorem**:

A connected graph has an Euler cycle if and only if every vertex has even degree.

A directed graph has an Eulerian cycle if and only if every vertex has equal in degree and out degree, and all of its vertices with nonzero degree belong to a single strongly connected component.

A directed graph has an Eulerian trail if and only if at most one vertex has (out-degree) âˆ’ (in-degree) = 1, at most one vertex has (in-degree) âˆ’ (out-degree) = 1, every other vertex has equal in-degree and out-degree, and all of its vertices with nonzero degree belong to a single connected component of the underlying undirected graph.

## Hierholzer's Algorithm

[Reconstruct Itinerary][reconstruct-itinerary]

{% highlight java %}
private Map<String, Queue<String>> map = new HashMap<>();;
private List<String> list = new ArrayList<>();

public List<String> findItinerary(List<List<String>> tickets) {
    for (List<String> t : tickets) {
        map.computeIfAbsent(t.get(0), k -> new PriorityQueue()).add(t.get(1));
    }

    visit("JFK");
    return list;
}

private void visit(String node) {
    while (map.containsKey(node) && !map.get(node).isEmpty()) {
        // deletes visited vertex
        visit(map.get(node).poll());
    }

    // current vertex is an exit
    // adds the vertext to the route backwards
    list.add(0, node);
}
{% endhighlight %}

[critical-connections-in-a-network]: https://leetcode.com/problems/critical-connections-in-a-network/
[evaluate-division]: https://leetcode.com/problems/evaluate-division/
[find-the-celebrity]: https://leetcode.com/problems/find-the-celebrity/
[find-the-shortest-superstring]: https://leetcode.com/problems/find-the-shortest-superstring/
[find-the-town-judge]: https://leetcode.com/problems/find-the-town-judge/
[graph-valid-tree]: https://leetcode.com/problems/graph-valid-tree/
[is-graph-bipartite]: https://leetcode.com/problems/is-graph-bipartite/
[knight-dialer]: https://leetcode.com/problems/knight-dialer/
[reconstruct-itinerary]: https://leetcode.com/problems/reconstruct-itinerary/
