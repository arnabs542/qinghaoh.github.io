---
layout: post
title:  "Points"
tags: array
---
# Dimension Reduction

Generally speaking, we need an N-dimensional array to represent an N-dimensional point. The trick to use a signle varialb is to join elements in each dimension with a delimiter. For example, `(x, y)` can be represented as `x#y`, where `#` is the delimiter.

[Path Crossing][path-crossing]

[Perfect Rectangle][perfect-rectangle]

{% highlight java %}
public boolean isRectangleCover(int[][] rectangles) {
    Set<String> set = new HashSet<String>();
    int x1 = Integer.MAX_VALUE, x2 = Integer.MIN_VALUE, y1 = Integer.MAX_VALUE, y2 = Integer.MIN_VALUE;
    int area = 0;
    for (int[] r : rectangles) {
        // computes the 4 corners
        x1 = Math.min(r[0], x1);
        y1 = Math.min(r[1], y1);
        x2 = Math.max(r[2], x2);
        y2 = Math.max(r[3], y2);

        area += (r[2] - r[0]) * (r[3] - r[1]);

        // xy, xb, ab, ay
        // bottom-left, top-left, top-right, bottom-right
        String k1 = r[0] + "#" + r[1], k2 = r[0] + "#" + r[3], k3 = r[2] + "#" + r[3], k4 = r[2] + "#" + r[1];

        // count of all the points should be even
        // cancels out even occurrences by:
        // - adds if absent
        // - removes if present
        if (!set.add(k1)) {
            set.remove(k1);
        }
        if (!set.add(k2)) {
            set.remove(k2);
        }
        if (!set.add(k3)) {
            set.remove(k3);
        }
        if (!set.add(k4)) {
            set.remove(k4);
        }
    }

    // count of all the four corner points should be one
    if (!set.contains(x1 + "#" + y1) ||
        !set.contains(x1 + "#" + y2) ||
        !set.contains(x2 + "#" + y1) ||
        !set.contains(x2 + "#" + y2) ||
        set.size() != 4) {
        return false;
    }

    return area == (x2-x1) * (y2-y1);
}
{% endhighlight %}

[path-crossing]: https://leetcode.com/problems/path-crossing/
[perfect-rectangle]: https://leetcode.com/problems/perfect-rectangle/
