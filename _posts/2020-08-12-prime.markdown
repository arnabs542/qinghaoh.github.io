---
layout: post
title:  "Prime"
tags: math
usemathjax: true
---
# Theorem

[Euclid-Euler theorem](https://en.wikipedia.org/wiki/Euclid%E2%80%93Euler_theorem)

The Euclid–Euler theorem is a theorem in mathematics that relates perfect numbers to Mersenne primes. It states that an even number is perfect if and only if it has the form \\(2^{p−1}(2^p − 1)\\), where \\(2^p − 1\\) is a prime number.

# Algorithm

[Count Primes][count-primes]

[Sieve of Eratosthenes](https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes)

{% highlight java %}
public int countPrimes(int n) {
    boolean[] notPrime = new boolean[n];
    int count = 0;
    for (int i = 2; i < n; i++) {
        if (!notPrime[i]) {
            count++;
            for (int j = i; i * j < n; j++) {
                notPrime[i * j] = true;
            }
        }
    }
    return count;
}
{% endhighlight %}

* Time complexity: `O(nlog(log(n)))`
* Space compolexity: `O(n)`

Proof: [Divergence of the Sum of the Reciprocals of the Primes](https://en.wikipedia.org/wiki/Divergence_of_the_sum_of_the_reciprocals_of_the_primes)

# Prime Factorization

[2 Keys Keyboard][2-keys-keyboard]

{% highlight java %}
public int minSteps(int n) {
    int s = 0;
    for (int d = 2; d <= n; d++) {
        while (n % d == 0) {
            s += d;
            n /= d;
        }
    }
    return s;
}
{% endhighlight %}

[Integer Break][integer-break]

{% highlight java %}
public int integerBreak(int n) {
    if (n < 4) {
        return n - 1;
    }

    int prod = 1;
    // if the maximum product contains a factor f >= 4
    // then we can replace it with factors 2 and (f - 2) without losing optimality
    // as 2 * (f - 2) = 2 * f - 4 >= f
    // we never need a factor >= 4
    // i.e. we only need factors 1, 2 and 3
    //
    // 1 is wasteful
    // 3 * 3 > 2 * 2 * 2, so we never use 2 more than twice.
    while (n > 4) {
        prod *= 3;
        n -= 3;
    }
    return prod *= n;
}
{% endhighlight %}

[2-keys-keyboard]: https://leetcode.com/problems/2-keys-keyboard/
[count-primes]: https://leetcode.com/problems/count-primes/
[integer-break]: https://leetcode.com/problems/integer-break/
